// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: measurements/measurements.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Position models a spatial location.
public struct Measurements_Position {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Details is a descriminated union of all Position types
  public var details: Measurements_Position.OneOf_Details? = nil

  public var absolute: Measurements_Position.Absolute {
    get {
      if case .absolute(let v)? = details {return v}
      return Measurements_Position.Absolute()
    }
    set {details = .absolute(newValue)}
  }

  public var relative: Measurements_Position.Relative {
    get {
      if case .relative(let v)? = details {return v}
      return Measurements_Position.Relative()
    }
    set {details = .relative(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Details is a descriminated union of all Position types
  public enum OneOf_Details: Equatable {
    case absolute(Measurements_Position.Absolute)
    case relative(Measurements_Position.Relative)

  #if !swift(>=4.1)
    public static func ==(lhs: Measurements_Position.OneOf_Details, rhs: Measurements_Position.OneOf_Details) -> Bool {
      switch (lhs, rhs) {
      case (.absolute(let l), .absolute(let r)): return l == r
      case (.relative(let l), .relative(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Absolute models an absolute position.
  public struct Absolute {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The latitude and longitude component of the position.
    public var coordinate: Measurements_Coordinate2D {
      get {return _coordinate ?? Measurements_Coordinate2D()}
      set {_coordinate = newValue}
    }
    /// Returns true if `coordinate` has been explicitly set.
    public var hasCoordinate: Bool {return self._coordinate != nil}
    /// Clears the value of `coordinate`. Subsequent reads from it will return its default value.
    public mutating func clearCoordinate() {self._coordinate = nil}

    /// The altitude component of the position.
    public var altitude: Measurements_Altitude {
      get {return _altitude ?? Measurements_Altitude()}
      set {_altitude = newValue}
    }
    /// Returns true if `altitude` has been explicitly set.
    public var hasAltitude: Bool {return self._altitude != nil}
    /// Clears the value of `altitude`. Subsequent reads from it will return its default value.
    public mutating func clearAltitude() {self._altitude = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _coordinate: Measurements_Coordinate2D? = nil
    fileprivate var _altitude: Measurements_Altitude? = nil
  }

  /// Relative models a position relative to an absolute position.
  public struct Relative {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The reference position from which the relative measurement is anchored.
    public var reference: Measurements_Position.Absolute {
      get {return _reference ?? Measurements_Position.Absolute()}
      set {_reference = newValue}
    }
    /// Returns true if `reference` has been explicitly set.
    public var hasReference: Bool {return self._reference != nil}
    /// Clears the value of `reference`. Subsequent reads from it will return its default value.
    public mutating func clearReference() {self._reference = nil}

    /// The distance from the reference position.
    public var distance: Units_Meters {
      get {return _distance ?? Units_Meters()}
      set {_distance = newValue}
    }
    /// Returns true if `distance` has been explicitly set.
    public var hasDistance: Bool {return self._distance != nil}
    /// Clears the value of `distance`. Subsequent reads from it will return its default value.
    public mutating func clearDistance() {self._distance = nil}

    /// The bearing from the reference position relative to true north.
    public var azimuth: Units_Degrees {
      get {return _azimuth ?? Units_Degrees()}
      set {_azimuth = newValue}
    }
    /// Returns true if `azimuth` has been explicitly set.
    public var hasAzimuth: Bool {return self._azimuth != nil}
    /// Clears the value of `azimuth`. Subsequent reads from it will return its default value.
    public mutating func clearAzimuth() {self._azimuth = nil}

    /// The error in the measurement.
    public var error: Measurements_Position.Relative.Error {
      get {return _error ?? Measurements_Position.Relative.Error()}
      set {_error = newValue}
    }
    /// Returns true if `error` has been explicitly set.
    public var hasError: Bool {return self._error != nil}
    /// Clears the value of `error`. Subsequent reads from it will return its default value.
    public mutating func clearError() {self._error = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct Error {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The error estimate on the distance measurement.
      public var distance: Units_Meters {
        get {return _distance ?? Units_Meters()}
        set {_distance = newValue}
      }
      /// Returns true if `distance` has been explicitly set.
      public var hasDistance: Bool {return self._distance != nil}
      /// Clears the value of `distance`. Subsequent reads from it will return its default value.
      public mutating func clearDistance() {self._distance = nil}

      /// The error estimate on the azimuth measurement.
      public var azimuth: Units_Degrees {
        get {return _azimuth ?? Units_Degrees()}
        set {_azimuth = newValue}
      }
      /// Returns true if `azimuth` has been explicitly set.
      public var hasAzimuth: Bool {return self._azimuth != nil}
      /// Clears the value of `azimuth`. Subsequent reads from it will return its default value.
      public mutating func clearAzimuth() {self._azimuth = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _distance: Units_Meters? = nil
      fileprivate var _azimuth: Units_Degrees? = nil
    }

    public init() {}

    fileprivate var _reference: Measurements_Position.Absolute? = nil
    fileprivate var _distance: Units_Meters? = nil
    fileprivate var _azimuth: Units_Degrees? = nil
    fileprivate var _error: Measurements_Position.Relative.Error? = nil
  }

  public init() {}
}

/// Coordinate2D models a WGS84 latitude and longitude.
public struct Measurements_Coordinate2D {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The latitude component.
  public var latitude: Units_Degrees {
    get {return _latitude ?? Units_Degrees()}
    set {_latitude = newValue}
  }
  /// Returns true if `latitude` has been explicitly set.
  public var hasLatitude: Bool {return self._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
  public mutating func clearLatitude() {self._latitude = nil}

  /// The longitude component.
  public var longitude: Units_Degrees {
    get {return _longitude ?? Units_Degrees()}
    set {_longitude = newValue}
  }
  /// Returns true if `longitude` has been explicitly set.
  public var hasLongitude: Bool {return self._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
  public mutating func clearLongitude() {self._longitude = nil}

  /// The error in the measurement.
  public var error: Measurements_Coordinate2D.Error {
    get {return _error ?? Measurements_Coordinate2D.Error()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Error models the inherent error in a coordinate measurement.
  public struct Error {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The error estimate on the latitude measurement.
    public var latitude: Units_Degrees {
      get {return _latitude ?? Units_Degrees()}
      set {_latitude = newValue}
    }
    /// Returns true if `latitude` has been explicitly set.
    public var hasLatitude: Bool {return self._latitude != nil}
    /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
    public mutating func clearLatitude() {self._latitude = nil}

    /// The error estimate on the longitude measurement.
    public var longitude: Units_Degrees {
      get {return _longitude ?? Units_Degrees()}
      set {_longitude = newValue}
    }
    /// Returns true if `longitude` has been explicitly set.
    public var hasLongitude: Bool {return self._longitude != nil}
    /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
    public mutating func clearLongitude() {self._longitude = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _latitude: Units_Degrees? = nil
    fileprivate var _longitude: Units_Degrees? = nil
  }

  public init() {}

  fileprivate var _latitude: Units_Degrees? = nil
  fileprivate var _longitude: Units_Degrees? = nil
  fileprivate var _error: Measurements_Coordinate2D.Error? = nil
}

/// Altitude models a height measurement from a given datum/reference.
public struct Measurements_Altitude {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The altitude as measured from the reference.
  public var height: Units_Meters {
    get {return _height ?? Units_Meters()}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  public var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  public mutating func clearHeight() {self._height = nil}

  /// The reference from which the altitude was measured.
  public var reference: Measurements_Altitude.Reference = .unknown

  /// The error in the measurement.
  public var error: Measurements_Altitude.Error {
    get {return _error ?? Measurements_Altitude.Error()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Reference enumerates all known reference/datum systems for altitude measurements.
  public enum Reference: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// An unknown reference.
    case unknown // = 0

    /// Height above the WGS84 reference ellipsoid.
    case ellipsoid // = 1

    /// Height above the hypothetical gravitational surface.
    case geoid // = 2

    /// (DO NOT USE) Height above the physical surface beneath the measurement.
    case surface // = 3

    /// (DO NOT USE) Height above an external measurement or estimate.
    case external // = 4

    /// Altitude using standard atmospheric pressure. 1013.25 hPa, 29.92 in Hg. Flight Level (FL).
    case standardBaro // = 5

    /// Altitude relative to local sea level adjusted for local barometric pressure. AMSL.
    case localBaro // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .ellipsoid
      case 2: self = .geoid
      case 3: self = .surface
      case 4: self = .external
      case 5: self = .standardBaro
      case 6: self = .localBaro
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .ellipsoid: return 1
      case .geoid: return 2
      case .surface: return 3
      case .external: return 4
      case .standardBaro: return 5
      case .localBaro: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Error models the inherent error in the altitude measurement.
  public struct Error {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The altitude error estimate.
    public var height: Units_Meters {
      get {return _height ?? Units_Meters()}
      set {_height = newValue}
    }
    /// Returns true if `height` has been explicitly set.
    public var hasHeight: Bool {return self._height != nil}
    /// Clears the value of `height`. Subsequent reads from it will return its default value.
    public mutating func clearHeight() {self._height = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _height: Units_Meters? = nil
  }

  public init() {}

  fileprivate var _height: Units_Meters? = nil
  fileprivate var _error: Measurements_Altitude.Error? = nil
}

#if swift(>=4.2)

extension Measurements_Altitude.Reference: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Measurements_Altitude.Reference] = [
    .unknown,
    .ellipsoid,
    .geoid,
    .surface,
    .external,
    .standardBaro,
    .localBaro,
  ]
}

#endif  // swift(>=4.2)

/// Velocity models a velocity measurement.
public struct Measurements_Velocity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var details: Measurements_Velocity.OneOf_Details? = nil

  public var polar: Measurements_Velocity.Polar {
    get {
      if case .polar(let v)? = details {return v}
      return Measurements_Velocity.Polar()
    }
    set {details = .polar(newValue)}
  }

  public var cartesian: Measurements_Velocity.Cartesian {
    get {
      if case .cartesian(let v)? = details {return v}
      return Measurements_Velocity.Cartesian()
    }
    set {details = .cartesian(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Details: Equatable {
    case polar(Measurements_Velocity.Polar)
    case cartesian(Measurements_Velocity.Cartesian)

  #if !swift(>=4.1)
    public static func ==(lhs: Measurements_Velocity.OneOf_Details, rhs: Measurements_Velocity.OneOf_Details) -> Bool {
      switch (lhs, rhs) {
      case (.polar(let l), .polar(let r)): return l == r
      case (.cartesian(let l), .cartesian(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Polar Velocity models a velocity relative to a heading.
  public struct Polar {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The heading relative to true north.
    public var heading: Units_Degrees {
      get {return _heading ?? Units_Degrees()}
      set {_heading = newValue}
    }
    /// Returns true if `heading` has been explicitly set.
    public var hasHeading: Bool {return self._heading != nil}
    /// Clears the value of `heading`. Subsequent reads from it will return its default value.
    public mutating func clearHeading() {self._heading = nil}

    /// The horizontal speed component relative to the ground.
    public var groundSpeed: Units_MetersPerSecond {
      get {return _groundSpeed ?? Units_MetersPerSecond()}
      set {_groundSpeed = newValue}
    }
    /// Returns true if `groundSpeed` has been explicitly set.
    public var hasGroundSpeed: Bool {return self._groundSpeed != nil}
    /// Clears the value of `groundSpeed`. Subsequent reads from it will return its default value.
    public mutating func clearGroundSpeed() {self._groundSpeed = nil}

    /// The vertical speed component.
    public var climbRate: Units_MetersPerSecond {
      get {return _climbRate ?? Units_MetersPerSecond()}
      set {_climbRate = newValue}
    }
    /// Returns true if `climbRate` has been explicitly set.
    public var hasClimbRate: Bool {return self._climbRate != nil}
    /// Clears the value of `climbRate`. Subsequent reads from it will return its default value.
    public mutating func clearClimbRate() {self._climbRate = nil}

    /// The error of the measurement.
    public var error: Measurements_Velocity.Polar.Error {
      get {return _error ?? Measurements_Velocity.Polar.Error()}
      set {_error = newValue}
    }
    /// Returns true if `error` has been explicitly set.
    public var hasError: Bool {return self._error != nil}
    /// Clears the value of `error`. Subsequent reads from it will return its default value.
    public mutating func clearError() {self._error = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Error models the inherent error in the polar velocity measurement.
    public struct Error {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The error in the heading.
      public var heading: Units_Degrees {
        get {return _heading ?? Units_Degrees()}
        set {_heading = newValue}
      }
      /// Returns true if `heading` has been explicitly set.
      public var hasHeading: Bool {return self._heading != nil}
      /// Clears the value of `heading`. Subsequent reads from it will return its default value.
      public mutating func clearHeading() {self._heading = nil}

      /// The error in the ground speed.
      public var groundSpeed: Units_MetersPerSecond {
        get {return _groundSpeed ?? Units_MetersPerSecond()}
        set {_groundSpeed = newValue}
      }
      /// Returns true if `groundSpeed` has been explicitly set.
      public var hasGroundSpeed: Bool {return self._groundSpeed != nil}
      /// Clears the value of `groundSpeed`. Subsequent reads from it will return its default value.
      public mutating func clearGroundSpeed() {self._groundSpeed = nil}

      /// The error in the vertical speed.
      public var climbRate: Units_MetersPerSecond {
        get {return _climbRate ?? Units_MetersPerSecond()}
        set {_climbRate = newValue}
      }
      /// Returns true if `climbRate` has been explicitly set.
      public var hasClimbRate: Bool {return self._climbRate != nil}
      /// Clears the value of `climbRate`. Subsequent reads from it will return its default value.
      public mutating func clearClimbRate() {self._climbRate = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _heading: Units_Degrees? = nil
      fileprivate var _groundSpeed: Units_MetersPerSecond? = nil
      fileprivate var _climbRate: Units_MetersPerSecond? = nil
    }

    public init() {}

    fileprivate var _heading: Units_Degrees? = nil
    fileprivate var _groundSpeed: Units_MetersPerSecond? = nil
    fileprivate var _climbRate: Units_MetersPerSecond? = nil
    fileprivate var _error: Measurements_Velocity.Polar.Error? = nil
  }

  /// Cartesian Velocity models a velocity as XYZ vectors in the NED (north-east-down) coordinate space.
  /// *To convert from ENU (east-north-up), set (X, Y, Z) to (N, E, negative-U) values respectively.
  public struct Cartesian {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The velocity along the X axis.
    public var x: Units_MetersPerSecond {
      get {return _x ?? Units_MetersPerSecond()}
      set {_x = newValue}
    }
    /// Returns true if `x` has been explicitly set.
    public var hasX: Bool {return self._x != nil}
    /// Clears the value of `x`. Subsequent reads from it will return its default value.
    public mutating func clearX() {self._x = nil}

    /// The velocity along the Y axis.
    public var y: Units_MetersPerSecond {
      get {return _y ?? Units_MetersPerSecond()}
      set {_y = newValue}
    }
    /// Returns true if `y` has been explicitly set.
    public var hasY: Bool {return self._y != nil}
    /// Clears the value of `y`. Subsequent reads from it will return its default value.
    public mutating func clearY() {self._y = nil}

    /// The velocity along the Z axis.
    public var z: Units_MetersPerSecond {
      get {return _z ?? Units_MetersPerSecond()}
      set {_z = newValue}
    }
    /// Returns true if `z` has been explicitly set.
    public var hasZ: Bool {return self._z != nil}
    /// Clears the value of `z`. Subsequent reads from it will return its default value.
    public mutating func clearZ() {self._z = nil}

    /// The error of the measurement.
    public var error: Measurements_Velocity.Cartesian.Error {
      get {return _error ?? Measurements_Velocity.Cartesian.Error()}
      set {_error = newValue}
    }
    /// Returns true if `error` has been explicitly set.
    public var hasError: Bool {return self._error != nil}
    /// Clears the value of `error`. Subsequent reads from it will return its default value.
    public mutating func clearError() {self._error = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Error models the inherent error in the cartesian velocity measurement.
    public struct Error {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The error along the X axis.
      public var x: Units_MetersPerSecond {
        get {return _x ?? Units_MetersPerSecond()}
        set {_x = newValue}
      }
      /// Returns true if `x` has been explicitly set.
      public var hasX: Bool {return self._x != nil}
      /// Clears the value of `x`. Subsequent reads from it will return its default value.
      public mutating func clearX() {self._x = nil}

      /// The error along the Y axis.
      public var y: Units_MetersPerSecond {
        get {return _y ?? Units_MetersPerSecond()}
        set {_y = newValue}
      }
      /// Returns true if `y` has been explicitly set.
      public var hasY: Bool {return self._y != nil}
      /// Clears the value of `y`. Subsequent reads from it will return its default value.
      public mutating func clearY() {self._y = nil}

      /// The error along the Z axis.
      public var z: Units_MetersPerSecond {
        get {return _z ?? Units_MetersPerSecond()}
        set {_z = newValue}
      }
      /// Returns true if `z` has been explicitly set.
      public var hasZ: Bool {return self._z != nil}
      /// Clears the value of `z`. Subsequent reads from it will return its default value.
      public mutating func clearZ() {self._z = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _x: Units_MetersPerSecond? = nil
      fileprivate var _y: Units_MetersPerSecond? = nil
      fileprivate var _z: Units_MetersPerSecond? = nil
    }

    public init() {}

    fileprivate var _x: Units_MetersPerSecond? = nil
    fileprivate var _y: Units_MetersPerSecond? = nil
    fileprivate var _z: Units_MetersPerSecond? = nil
    fileprivate var _error: Measurements_Velocity.Cartesian.Error? = nil
  }

  public init() {}
}

/// Orientation models an attitude or positional orientation measurement.
public struct Measurements_Orientation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The angular rotation of the vehicle along its vertical axis relative to True North.
  public var yaw: Units_Degrees {
    get {return _yaw ?? Units_Degrees()}
    set {_yaw = newValue}
  }
  /// Returns true if `yaw` has been explicitly set.
  public var hasYaw: Bool {return self._yaw != nil}
  /// Clears the value of `yaw`. Subsequent reads from it will return its default value.
  public mutating func clearYaw() {self._yaw = nil}

  /// The angular rotation of the vehicle along its lateral axis.
  public var pitch: Units_Degrees {
    get {return _pitch ?? Units_Degrees()}
    set {_pitch = newValue}
  }
  /// Returns true if `pitch` has been explicitly set.
  public var hasPitch: Bool {return self._pitch != nil}
  /// Clears the value of `pitch`. Subsequent reads from it will return its default value.
  public mutating func clearPitch() {self._pitch = nil}

  /// The angular rotation of the vehicle along its longitudinal axis.
  public var roll: Units_Degrees {
    get {return _roll ?? Units_Degrees()}
    set {_roll = newValue}
  }
  /// Returns true if `roll` has been explicitly set.
  public var hasRoll: Bool {return self._roll != nil}
  /// Clears the value of `roll`. Subsequent reads from it will return its default value.
  public mutating func clearRoll() {self._roll = nil}

  /// The error of the measurement.
  public var error: Measurements_Orientation.Error {
    get {return _error ?? Measurements_Orientation.Error()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Error models the inherent error in the orientation measurement.
  public struct Error {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The error in angular rotation of the vehicle along its vertical axis relative to True North.
    public var yaw: Units_Degrees {
      get {return _yaw ?? Units_Degrees()}
      set {_yaw = newValue}
    }
    /// Returns true if `yaw` has been explicitly set.
    public var hasYaw: Bool {return self._yaw != nil}
    /// Clears the value of `yaw`. Subsequent reads from it will return its default value.
    public mutating func clearYaw() {self._yaw = nil}

    /// The error in angular rotation of the vehicle along its lateral axis.
    public var pitch: Units_Degrees {
      get {return _pitch ?? Units_Degrees()}
      set {_pitch = newValue}
    }
    /// Returns true if `pitch` has been explicitly set.
    public var hasPitch: Bool {return self._pitch != nil}
    /// Clears the value of `pitch`. Subsequent reads from it will return its default value.
    public mutating func clearPitch() {self._pitch = nil}

    /// The error in angular rotation of the vehicle along its longitudinal axis.
    public var roll: Units_Degrees {
      get {return _roll ?? Units_Degrees()}
      set {_roll = newValue}
    }
    /// Returns true if `roll` has been explicitly set.
    public var hasRoll: Bool {return self._roll != nil}
    /// Clears the value of `roll`. Subsequent reads from it will return its default value.
    public mutating func clearRoll() {self._roll = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _yaw: Units_Degrees? = nil
    fileprivate var _pitch: Units_Degrees? = nil
    fileprivate var _roll: Units_Degrees? = nil
  }

  public init() {}

  fileprivate var _yaw: Units_Degrees? = nil
  fileprivate var _pitch: Units_Degrees? = nil
  fileprivate var _roll: Units_Degrees? = nil
  fileprivate var _error: Measurements_Orientation.Error? = nil
}

/// Acceleration models an acceleration measurement.
public struct Measurements_Acceleration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The acceleration along the X axis.
  public var x: Units_MetersPerSecondSquared {
    get {return _x ?? Units_MetersPerSecondSquared()}
    set {_x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  public var hasX: Bool {return self._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  public mutating func clearX() {self._x = nil}

  /// The acceleration along the Y axis.
  public var y: Units_MetersPerSecondSquared {
    get {return _y ?? Units_MetersPerSecondSquared()}
    set {_y = newValue}
  }
  /// Returns true if `y` has been explicitly set.
  public var hasY: Bool {return self._y != nil}
  /// Clears the value of `y`. Subsequent reads from it will return its default value.
  public mutating func clearY() {self._y = nil}

  /// The acceleration along the Z axis.
  public var z: Units_MetersPerSecondSquared {
    get {return _z ?? Units_MetersPerSecondSquared()}
    set {_z = newValue}
  }
  /// Returns true if `z` has been explicitly set.
  public var hasZ: Bool {return self._z != nil}
  /// Clears the value of `z`. Subsequent reads from it will return its default value.
  public mutating func clearZ() {self._z = nil}

  public var error: Measurements_Acceleration.Error {
    get {return _error ?? Measurements_Acceleration.Error()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Error models the inherent error in an acceleration measurement.
  public struct Error {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The error along the X axis.
    public var x: Units_MetersPerSecond {
      get {return _x ?? Units_MetersPerSecond()}
      set {_x = newValue}
    }
    /// Returns true if `x` has been explicitly set.
    public var hasX: Bool {return self._x != nil}
    /// Clears the value of `x`. Subsequent reads from it will return its default value.
    public mutating func clearX() {self._x = nil}

    /// The error along the Y axis.
    public var y: Units_MetersPerSecond {
      get {return _y ?? Units_MetersPerSecond()}
      set {_y = newValue}
    }
    /// Returns true if `y` has been explicitly set.
    public var hasY: Bool {return self._y != nil}
    /// Clears the value of `y`. Subsequent reads from it will return its default value.
    public mutating func clearY() {self._y = nil}

    /// The error along the Z axis.
    public var z: Units_MetersPerSecond {
      get {return _z ?? Units_MetersPerSecond()}
      set {_z = newValue}
    }
    /// Returns true if `z` has been explicitly set.
    public var hasZ: Bool {return self._z != nil}
    /// Clears the value of `z`. Subsequent reads from it will return its default value.
    public mutating func clearZ() {self._z = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _x: Units_MetersPerSecond? = nil
    fileprivate var _y: Units_MetersPerSecond? = nil
    fileprivate var _z: Units_MetersPerSecond? = nil
  }

  public init() {}

  fileprivate var _x: Units_MetersPerSecondSquared? = nil
  fileprivate var _y: Units_MetersPerSecondSquared? = nil
  fileprivate var _z: Units_MetersPerSecondSquared? = nil
  fileprivate var _error: Measurements_Acceleration.Error? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "measurements"

extension Measurements_Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Position"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "absolute"),
    2: .same(proto: "relative"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Measurements_Position.Absolute?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .absolute(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .absolute(v)}
      case 2:
        var v: Measurements_Position.Relative?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .relative(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .relative(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.details {
    case .absolute(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .relative(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Position, rhs: Measurements_Position) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Position.Absolute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Position.protoMessageName + ".Absolute"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "coordinate"),
    2: .same(proto: "altitude"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._coordinate)
      case 2: try decoder.decodeSingularMessageField(value: &self._altitude)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._coordinate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._altitude {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Position.Absolute, rhs: Measurements_Position.Absolute) -> Bool {
    if lhs._coordinate != rhs._coordinate {return false}
    if lhs._altitude != rhs._altitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Position.Relative: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Position.protoMessageName + ".Relative"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reference"),
    2: .same(proto: "distance"),
    3: .same(proto: "azimuth"),
    1001: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._reference)
      case 2: try decoder.decodeSingularMessageField(value: &self._distance)
      case 3: try decoder.decodeSingularMessageField(value: &self._azimuth)
      case 1001: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._reference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._distance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._azimuth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Position.Relative, rhs: Measurements_Position.Relative) -> Bool {
    if lhs._reference != rhs._reference {return false}
    if lhs._distance != rhs._distance {return false}
    if lhs._azimuth != rhs._azimuth {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Position.Relative.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Position.Relative.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "distance"),
    2: .same(proto: "azimuth"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._distance)
      case 2: try decoder.decodeSingularMessageField(value: &self._azimuth)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._distance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._azimuth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Position.Relative.Error, rhs: Measurements_Position.Relative.Error) -> Bool {
    if lhs._distance != rhs._distance {return false}
    if lhs._azimuth != rhs._azimuth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Coordinate2D: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Coordinate2D"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
    1001: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._latitude)
      case 2: try decoder.decodeSingularMessageField(value: &self._longitude)
      case 1001: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._latitude {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._longitude {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Coordinate2D, rhs: Measurements_Coordinate2D) -> Bool {
    if lhs._latitude != rhs._latitude {return false}
    if lhs._longitude != rhs._longitude {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Coordinate2D.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Coordinate2D.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._latitude)
      case 2: try decoder.decodeSingularMessageField(value: &self._longitude)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._latitude {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._longitude {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Coordinate2D.Error, rhs: Measurements_Coordinate2D.Error) -> Bool {
    if lhs._latitude != rhs._latitude {return false}
    if lhs._longitude != rhs._longitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Altitude: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Altitude"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "reference"),
    1001: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._height)
      case 2: try decoder.decodeSingularEnumField(value: &self.reference)
      case 1001: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._height {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.reference != .unknown {
      try visitor.visitSingularEnumField(value: self.reference, fieldNumber: 2)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Altitude, rhs: Measurements_Altitude) -> Bool {
    if lhs._height != rhs._height {return false}
    if lhs.reference != rhs.reference {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Altitude.Reference: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REFERENCE_UNKNOWN"),
    1: .same(proto: "REFERENCE_ELLIPSOID"),
    2: .same(proto: "REFERENCE_GEOID"),
    3: .same(proto: "REFERENCE_SURFACE"),
    4: .same(proto: "REFERENCE_EXTERNAL"),
    5: .same(proto: "REFERENCE_STANDARD_BARO"),
    6: .same(proto: "REFERENCE_LOCAL_BARO"),
  ]
}

extension Measurements_Altitude.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Altitude.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._height)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._height {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Altitude.Error, rhs: Measurements_Altitude.Error) -> Bool {
    if lhs._height != rhs._height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Velocity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Velocity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "polar"),
    2: .same(proto: "cartesian"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Measurements_Velocity.Polar?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .polar(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .polar(v)}
      case 2:
        var v: Measurements_Velocity.Cartesian?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .cartesian(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .cartesian(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.details {
    case .polar(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .cartesian(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Velocity, rhs: Measurements_Velocity) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Velocity.Polar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Velocity.protoMessageName + ".Polar"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "heading"),
    2: .same(proto: "groundSpeed"),
    3: .same(proto: "climbRate"),
    1001: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._heading)
      case 2: try decoder.decodeSingularMessageField(value: &self._groundSpeed)
      case 3: try decoder.decodeSingularMessageField(value: &self._climbRate)
      case 1001: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._heading {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._groundSpeed {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._climbRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Velocity.Polar, rhs: Measurements_Velocity.Polar) -> Bool {
    if lhs._heading != rhs._heading {return false}
    if lhs._groundSpeed != rhs._groundSpeed {return false}
    if lhs._climbRate != rhs._climbRate {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Velocity.Polar.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Velocity.Polar.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "heading"),
    2: .same(proto: "groundSpeed"),
    3: .same(proto: "climbRate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._heading)
      case 2: try decoder.decodeSingularMessageField(value: &self._groundSpeed)
      case 3: try decoder.decodeSingularMessageField(value: &self._climbRate)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._heading {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._groundSpeed {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._climbRate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Velocity.Polar.Error, rhs: Measurements_Velocity.Polar.Error) -> Bool {
    if lhs._heading != rhs._heading {return false}
    if lhs._groundSpeed != rhs._groundSpeed {return false}
    if lhs._climbRate != rhs._climbRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Velocity.Cartesian: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Velocity.protoMessageName + ".Cartesian"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
    1001: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._x)
      case 2: try decoder.decodeSingularMessageField(value: &self._y)
      case 3: try decoder.decodeSingularMessageField(value: &self._z)
      case 1001: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._x {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._y {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._z {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Velocity.Cartesian, rhs: Measurements_Velocity.Cartesian) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._z != rhs._z {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Velocity.Cartesian.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Velocity.Cartesian.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._x)
      case 2: try decoder.decodeSingularMessageField(value: &self._y)
      case 3: try decoder.decodeSingularMessageField(value: &self._z)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._x {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._y {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._z {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Velocity.Cartesian.Error, rhs: Measurements_Velocity.Cartesian.Error) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._z != rhs._z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Orientation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Orientation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "yaw"),
    2: .same(proto: "pitch"),
    3: .same(proto: "roll"),
    1001: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._yaw)
      case 2: try decoder.decodeSingularMessageField(value: &self._pitch)
      case 3: try decoder.decodeSingularMessageField(value: &self._roll)
      case 1001: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._yaw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pitch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._roll {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Orientation, rhs: Measurements_Orientation) -> Bool {
    if lhs._yaw != rhs._yaw {return false}
    if lhs._pitch != rhs._pitch {return false}
    if lhs._roll != rhs._roll {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Orientation.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Orientation.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "yaw"),
    2: .same(proto: "pitch"),
    3: .same(proto: "roll"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._yaw)
      case 2: try decoder.decodeSingularMessageField(value: &self._pitch)
      case 3: try decoder.decodeSingularMessageField(value: &self._roll)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._yaw {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pitch {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._roll {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Orientation.Error, rhs: Measurements_Orientation.Error) -> Bool {
    if lhs._yaw != rhs._yaw {return false}
    if lhs._pitch != rhs._pitch {return false}
    if lhs._roll != rhs._roll {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Acceleration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Acceleration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
    1001: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._x)
      case 2: try decoder.decodeSingularMessageField(value: &self._y)
      case 3: try decoder.decodeSingularMessageField(value: &self._z)
      case 1001: try decoder.decodeSingularMessageField(value: &self._error)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._x {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._y {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._z {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Acceleration, rhs: Measurements_Acceleration) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._z != rhs._z {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Measurements_Acceleration.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Measurements_Acceleration.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "z"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._x)
      case 2: try decoder.decodeSingularMessageField(value: &self._y)
      case 3: try decoder.decodeSingularMessageField(value: &self._z)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._x {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._y {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._z {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Measurements_Acceleration.Error, rhs: Measurements_Acceleration.Error) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._z != rhs._z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
