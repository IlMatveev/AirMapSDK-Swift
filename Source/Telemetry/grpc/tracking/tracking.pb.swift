// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tracking/tracking.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ConnectProviderParameters models configuration parameters for provider streams.
struct Tracking_ConnectProviderParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The ID of the provider.
  var id: Tracking_Identity.ProviderId {
    get {return _storage._id ?? Tracking_Identity.ProviderId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  /// The expected duration between updates. Used for monitoring and alerting
  /// purposes. If null, the pipeline chooses a default value or tries to
  /// determine a reasonable value based on historic data.
  var expectedDurationBetweenUpdates: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._expectedDurationBetweenUpdates ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._expectedDurationBetweenUpdates = newValue}
  }
  /// Returns true if `expectedDurationBetweenUpdates` has been explicitly set.
  var hasExpectedDurationBetweenUpdates: Bool {return _storage._expectedDurationBetweenUpdates != nil}
  /// Clears the value of `expectedDurationBetweenUpdates`. Subsequent reads from it will return its default value.
  mutating func clearExpectedDurationBetweenUpdates() {_uniqueStorage()._expectedDurationBetweenUpdates = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ConnectProcessorParameters models configuration parameters for processor streams
struct Tracking_ConnectProcessorParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Tracks will be forward-projected at a constant rate.
  var enableProjection: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Update bundles types used in the exchange of tracks.
struct Tracking_Update {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// FromProvider wraps messages being sent by a provider to a traffic collector.
  struct FromProvider {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var details: OneOf_Details? {
      get {return _storage._details}
      set {_uniqueStorage()._details = newValue}
    }

    /// Provider operational status.
    var status: System_Status {
      get {
        if case .status(let v)? = _storage._details {return v}
        return System_Status()
      }
      set {_uniqueStorage()._details = .status(newValue)}
    }

    /// Batch of updates from a track provider.
    var batch: Tracking_Track.Batch {
      get {
        if case .batch(let v)? = _storage._details {return v}
        return Tracking_Track.Batch()
      }
      set {_uniqueStorage()._details = .batch(newValue)}
    }

    /// Parameters used to customize the stream from the provider. 
    var params: Tracking_ConnectProviderParameters {
      get {
        if case .params(let v)? = _storage._details {return v}
        return Tracking_ConnectProviderParameters()
      }
      set {_uniqueStorage()._details = .params(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Details: Equatable {
      /// Provider operational status.
      case status(System_Status)
      /// Batch of updates from a track provider.
      case batch(Tracking_Track.Batch)
      /// Parameters used to customize the stream from the provider. 
      case params(Tracking_ConnectProviderParameters)

    #if !swift(>=4.1)
      static func ==(lhs: Tracking_Update.FromProvider.OneOf_Details, rhs: Tracking_Update.FromProvider.OneOf_Details) -> Bool {
        switch (lhs, rhs) {
        case (.status(let l), .status(let r)): return l == r
        case (.batch(let l), .batch(let r)): return l == r
        case (.params(let l), .params(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// ToProvider wraps messages being sent from a collector back to a provider.
  struct ToProvider {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var details: OneOf_Details? {
      get {return _storage._details}
      set {_uniqueStorage()._details = newValue}
    }

    /// Collector operational status.
    var status: System_Status {
      get {
        if case .status(let v)? = _storage._details {return v}
        return System_Status()
      }
      set {_uniqueStorage()._details = .status(newValue)}
    }

    /// Acknowledgement of received updates.
    var ack: System_Ack {
      get {
        if case .ack(let v)? = _storage._details {return v}
        return System_Ack()
      }
      set {_uniqueStorage()._details = .ack(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Details: Equatable {
      /// Collector operational status.
      case status(System_Status)
      /// Acknowledgement of received updates.
      case ack(System_Ack)

    #if !swift(>=4.1)
      static func ==(lhs: Tracking_Update.ToProvider.OneOf_Details, rhs: Tracking_Update.ToProvider.OneOf_Details) -> Bool {
        switch (lhs, rhs) {
        case (.status(let l), .status(let r)): return l == r
        case (.ack(let l), .ack(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// ToProcessor wraps messages being sent by a collector to a processor.
  struct ToProcessor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var details: OneOf_Details? {
      get {return _storage._details}
      set {_uniqueStorage()._details = newValue}
    }

    /// Collector operational status.
    var status: System_Status {
      get {
        if case .status(let v)? = _storage._details {return v}
        return System_Status()
      }
      set {_uniqueStorage()._details = .status(newValue)}
    }

    /// Batch of updates from a track collector.
    var batch: Tracking_Track.Batch {
      get {
        if case .batch(let v)? = _storage._details {return v}
        return Tracking_Track.Batch()
      }
      set {_uniqueStorage()._details = .batch(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Details: Equatable {
      /// Collector operational status.
      case status(System_Status)
      /// Batch of updates from a track collector.
      case batch(Tracking_Track.Batch)

    #if !swift(>=4.1)
      static func ==(lhs: Tracking_Update.ToProcessor.OneOf_Details, rhs: Tracking_Update.ToProcessor.OneOf_Details) -> Bool {
        switch (lhs, rhs) {
        case (.status(let l), .status(let r)): return l == r
        case (.batch(let l), .batch(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct FromProcessor {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var details: OneOf_Details? {
      get {return _storage._details}
      set {_uniqueStorage()._details = newValue}
    }

    /// Processor operational status.
    var status: System_Status {
      get {
        if case .status(let v)? = _storage._details {return v}
        return System_Status()
      }
      set {_uniqueStorage()._details = .status(newValue)}
    }

    /// Acknowledgement of received updates.
    var ack: System_Ack {
      get {
        if case .ack(let v)? = _storage._details {return v}
        return System_Ack()
      }
      set {_uniqueStorage()._details = .ack(newValue)}
    }

    /// Parameters used to customize the stream to the processor.
    var params: Tracking_ConnectProcessorParameters {
      get {
        if case .params(let v)? = _storage._details {return v}
        return Tracking_ConnectProcessorParameters()
      }
      set {_uniqueStorage()._details = .params(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Details: Equatable {
      /// Processor operational status.
      case status(System_Status)
      /// Acknowledgement of received updates.
      case ack(System_Ack)
      /// Parameters used to customize the stream to the processor.
      case params(Tracking_ConnectProcessorParameters)

    #if !swift(>=4.1)
      static func ==(lhs: Tracking_Update.FromProcessor.OneOf_Details, rhs: Tracking_Update.FromProcessor.OneOf_Details) -> Bool {
        switch (lhs, rhs) {
        case (.status(let l), .status(let r)): return l == r
        case (.ack(let l), .ack(let r)): return l == r
        case (.params(let l), .params(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tracking"

extension Tracking_ConnectProviderParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectProviderParameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "expected_duration_between_updates"),
  ]

  fileprivate class _StorageClass {
    var _id: Tracking_Identity.ProviderId? = nil
    var _expectedDurationBetweenUpdates: SwiftProtobuf.Google_Protobuf_Duration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _expectedDurationBetweenUpdates = source._expectedDurationBetweenUpdates
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._expectedDurationBetweenUpdates)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._expectedDurationBetweenUpdates {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tracking_ConnectProviderParameters, rhs: Tracking_ConnectProviderParameters) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._expectedDurationBetweenUpdates != rhs_storage._expectedDurationBetweenUpdates {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tracking_ConnectProcessorParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectProcessorParameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "enable_projection"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.enableProjection)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enableProjection != false {
      try visitor.visitSingularBoolField(value: self.enableProjection, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tracking_ConnectProcessorParameters, rhs: Tracking_ConnectProcessorParameters) -> Bool {
    if lhs.enableProjection != rhs.enableProjection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tracking_Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Update"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tracking_Update, rhs: Tracking_Update) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tracking_Update.FromProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tracking_Update.protoMessageName + ".FromProvider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "batch"),
    3: .same(proto: "params"),
  ]

  fileprivate class _StorageClass {
    var _details: Tracking_Update.FromProvider.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: System_Status?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .status(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .status(v)}
        case 2:
          var v: Tracking_Track.Batch?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .batch(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .batch(v)}
        case 3:
          var v: Tracking_ConnectProviderParameters?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .params(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .params(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .status(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .batch(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .params(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tracking_Update.FromProvider, rhs: Tracking_Update.FromProvider) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tracking_Update.ToProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tracking_Update.protoMessageName + ".ToProvider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "ack"),
  ]

  fileprivate class _StorageClass {
    var _details: Tracking_Update.ToProvider.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: System_Status?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .status(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .status(v)}
        case 2:
          var v: System_Ack?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .ack(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .ack(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .status(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .ack(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tracking_Update.ToProvider, rhs: Tracking_Update.ToProvider) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tracking_Update.ToProcessor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tracking_Update.protoMessageName + ".ToProcessor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "batch"),
  ]

  fileprivate class _StorageClass {
    var _details: Tracking_Update.ToProcessor.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: System_Status?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .status(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .status(v)}
        case 2:
          var v: Tracking_Track.Batch?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .batch(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .batch(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .status(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .batch(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tracking_Update.ToProcessor, rhs: Tracking_Update.ToProcessor) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tracking_Update.FromProcessor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Tracking_Update.protoMessageName + ".FromProcessor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "ack"),
    3: .same(proto: "params"),
  ]

  fileprivate class _StorageClass {
    var _details: Tracking_Update.FromProcessor.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: System_Status?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .status(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .status(v)}
        case 2:
          var v: System_Ack?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .ack(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .ack(v)}
        case 3:
          var v: Tracking_ConnectProcessorParameters?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .params(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .params(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .status(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .ack(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .params(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tracking_Update.FromProcessor, rhs: Tracking_Update.FromProcessor) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
