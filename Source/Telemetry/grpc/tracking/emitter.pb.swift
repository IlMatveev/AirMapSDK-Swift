// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tracking/emitter.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Emitter marks the emitter of the reported observation.
enum Tracking_Emitter: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// unknown
  case unknown // = 0

  /// light aircraft <= 15500 lbs
  case lightAircraft // = 1

  /// 15500 lbs < small aircraft < 75000 lbs
  case smallAircraft // = 2

  /// 75000 lbs < medium aircraft < 300000 lbs
  case mediumAircraft // = 3

  /// high vortex, large aircraft
  case largeAircraft // = 4

  /// >= 300000 lbs
  case heavyAircaft // = 5

  /// highly maneuverable (5g capability) and high speed (400+ knots cruise)
  case highlyManueverable // = 6

  /// reserved 7 to 9;
  case rotorcraft // = 10

  /// glider / sailplane
  case glider // = 11

  /// lighter than air / blimp
  case lighterThanAir // = 12

  /// unmanned aerial vehicle
  case uav // = 13

  /// space / transatmospheric vehicle
  case space // = 14

  /// ultralight / hang glider / paraglider
  case ultralight // = 15

  /// parachutist / skydiver
  case parachutist // = 16

  /// reserved 17 to 19;
  case sfcEmergencyVehicle // = 20

  /// surface service vehicle
  case sfcServiceVehicle // = 21

  /// fixed ground or tethered obstacle
  case sfcObstacle // = 22

  /// cluster obstacle
  case sfcObstacleCluster // = 23

  /// line obstacle
  case sfcObstacleLine // = 24
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .lightAircraft
    case 2: self = .smallAircraft
    case 3: self = .mediumAircraft
    case 4: self = .largeAircraft
    case 5: self = .heavyAircaft
    case 6: self = .highlyManueverable
    case 10: self = .rotorcraft
    case 11: self = .glider
    case 12: self = .lighterThanAir
    case 13: self = .uav
    case 14: self = .space
    case 15: self = .ultralight
    case 16: self = .parachutist
    case 20: self = .sfcEmergencyVehicle
    case 21: self = .sfcServiceVehicle
    case 22: self = .sfcObstacle
    case 23: self = .sfcObstacleCluster
    case 24: self = .sfcObstacleLine
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .lightAircraft: return 1
    case .smallAircraft: return 2
    case .mediumAircraft: return 3
    case .largeAircraft: return 4
    case .heavyAircaft: return 5
    case .highlyManueverable: return 6
    case .rotorcraft: return 10
    case .glider: return 11
    case .lighterThanAir: return 12
    case .uav: return 13
    case .space: return 14
    case .ultralight: return 15
    case .parachutist: return 16
    case .sfcEmergencyVehicle: return 20
    case .sfcServiceVehicle: return 21
    case .sfcObstacle: return 22
    case .sfcObstacleCluster: return 23
    case .sfcObstacleLine: return 24
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tracking_Emitter: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tracking_Emitter] = [
    .unknown,
    .lightAircraft,
    .smallAircraft,
    .mediumAircraft,
    .largeAircraft,
    .heavyAircaft,
    .highlyManueverable,
    .rotorcraft,
    .glider,
    .lighterThanAir,
    .uav,
    .space,
    .ultralight,
    .parachutist,
    .sfcEmergencyVehicle,
    .sfcServiceVehicle,
    .sfcObstacle,
    .sfcObstacleCluster,
    .sfcObstacleLine,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Tracking_Emitter: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EMITTER_UNKNOWN"),
    1: .same(proto: "EMITTER_LIGHT_AIRCRAFT"),
    2: .same(proto: "EMITTER_SMALL_AIRCRAFT"),
    3: .same(proto: "EMITTER_MEDIUM_AIRCRAFT"),
    4: .same(proto: "EMITTER_LARGE_AIRCRAFT"),
    5: .same(proto: "EMITTER_HEAVY_AIRCAFT"),
    6: .same(proto: "EMITTER_HIGHLY_MANUEVERABLE"),
    10: .same(proto: "EMITTER_ROTORCRAFT"),
    11: .same(proto: "EMITTER_GLIDER"),
    12: .same(proto: "EMITTER_LIGHTER_THAN_AIR"),
    13: .same(proto: "EMITTER_UAV"),
    14: .same(proto: "EMITTER_SPACE"),
    15: .same(proto: "EMITTER_ULTRALIGHT"),
    16: .same(proto: "EMITTER_PARACHUTIST"),
    20: .same(proto: "EMITTER_SFC_EMERGENCY_VEHICLE"),
    21: .same(proto: "EMITTER_SFC_SERVICE_VEHICLE"),
    22: .same(proto: "EMITTER_SFC_OBSTACLE"),
    23: .same(proto: "EMITTER_SFC_OBSTACLE_CLUSTER"),
    24: .same(proto: "EMITTER_SFC_OBSTACLE_LINE"),
  ]
}
