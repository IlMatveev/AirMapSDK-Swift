// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: extensions.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Extension support defined in extensions.proto.

extension Google_Protobuf_FieldOptions {

  /// All fields in a message are considered optional and it is left up to application code
  /// to handle a field missing properly. For that, we introduce the extension 'nullable' and
  /// the following semantic in the context of this proto:
  /// Any field that is missing and that is not marked with 'nullable = true' is considered an error.
  var AirMapnullable: Bool {
    get {return getExtensionValue(ext: AirMapExtensions_nullable) ?? false}
    set {setExtensionValue(ext: AirMapExtensions_nullable, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_nullable`
  /// has been explicitly set.
  var hasAirMapnullable: Bool {
    return hasExtensionValue(ext: AirMapExtensions_nullable)
  }
  /// Clears the value of extension `AirMapExtensions_nullable`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapnullable() {
    clearExtensionValue(ext: AirMapExtensions_nullable)
  }

  /// Helps to further specify string formats
  var AirMapformat: String {
    get {return getExtensionValue(ext: AirMapExtensions_format) ?? String()}
    set {setExtensionValue(ext: AirMapExtensions_format, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_format`
  /// has been explicitly set.
  var hasAirMapformat: Bool {
    return hasExtensionValue(ext: AirMapExtensions_format)
  }
  /// Clears the value of extension `AirMapExtensions_format`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapformat() {
    clearExtensionValue(ext: AirMapExtensions_format)
  }

  /// We put the following extensions here and reserve them for future use.
  var AirMapdefaultDegrees: AirMapDegrees {
    get {return getExtensionValue(ext: AirMapExtensions_default_degrees) ?? AirMapDegrees()}
    set {setExtensionValue(ext: AirMapExtensions_default_degrees, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_default_degrees`
  /// has been explicitly set.
  var hasAirMapdefaultDegrees: Bool {
    return hasExtensionValue(ext: AirMapExtensions_default_degrees)
  }
  /// Clears the value of extension `AirMapExtensions_default_degrees`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapdefaultDegrees() {
    clearExtensionValue(ext: AirMapExtensions_default_degrees)
  }

  var AirMapminDegrees: AirMapDegrees {
    get {return getExtensionValue(ext: AirMapExtensions_min_degrees) ?? AirMapDegrees()}
    set {setExtensionValue(ext: AirMapExtensions_min_degrees, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_min_degrees`
  /// has been explicitly set.
  var hasAirMapminDegrees: Bool {
    return hasExtensionValue(ext: AirMapExtensions_min_degrees)
  }
  /// Clears the value of extension `AirMapExtensions_min_degrees`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapminDegrees() {
    clearExtensionValue(ext: AirMapExtensions_min_degrees)
  }

  var AirMapmaxDegrees: AirMapDegrees {
    get {return getExtensionValue(ext: AirMapExtensions_max_degrees) ?? AirMapDegrees()}
    set {setExtensionValue(ext: AirMapExtensions_max_degrees, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_max_degrees`
  /// has been explicitly set.
  var hasAirMapmaxDegrees: Bool {
    return hasExtensionValue(ext: AirMapExtensions_max_degrees)
  }
  /// Clears the value of extension `AirMapExtensions_max_degrees`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapmaxDegrees() {
    clearExtensionValue(ext: AirMapExtensions_max_degrees)
  }

  var AirMapdefaultMeters: AirMapMeters {
    get {return getExtensionValue(ext: AirMapExtensions_default_meters) ?? AirMapMeters()}
    set {setExtensionValue(ext: AirMapExtensions_default_meters, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_default_meters`
  /// has been explicitly set.
  var hasAirMapdefaultMeters: Bool {
    return hasExtensionValue(ext: AirMapExtensions_default_meters)
  }
  /// Clears the value of extension `AirMapExtensions_default_meters`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapdefaultMeters() {
    clearExtensionValue(ext: AirMapExtensions_default_meters)
  }

  var AirMapminMeters: AirMapMeters {
    get {return getExtensionValue(ext: AirMapExtensions_min_meters) ?? AirMapMeters()}
    set {setExtensionValue(ext: AirMapExtensions_min_meters, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_min_meters`
  /// has been explicitly set.
  var hasAirMapminMeters: Bool {
    return hasExtensionValue(ext: AirMapExtensions_min_meters)
  }
  /// Clears the value of extension `AirMapExtensions_min_meters`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapminMeters() {
    clearExtensionValue(ext: AirMapExtensions_min_meters)
  }

  var AirMapmaxMeters: AirMapMeters {
    get {return getExtensionValue(ext: AirMapExtensions_max_meters) ?? AirMapMeters()}
    set {setExtensionValue(ext: AirMapExtensions_max_meters, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_max_meters`
  /// has been explicitly set.
  var hasAirMapmaxMeters: Bool {
    return hasExtensionValue(ext: AirMapExtensions_max_meters)
  }
  /// Clears the value of extension `AirMapExtensions_max_meters`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapmaxMeters() {
    clearExtensionValue(ext: AirMapExtensions_max_meters)
  }

  var AirMapdefaultMetersPerSecond: AirMapMetersPerSecond {
    get {return getExtensionValue(ext: AirMapExtensions_default_meters_per_second) ?? AirMapMetersPerSecond()}
    set {setExtensionValue(ext: AirMapExtensions_default_meters_per_second, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_default_meters_per_second`
  /// has been explicitly set.
  var hasAirMapdefaultMetersPerSecond: Bool {
    return hasExtensionValue(ext: AirMapExtensions_default_meters_per_second)
  }
  /// Clears the value of extension `AirMapExtensions_default_meters_per_second`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapdefaultMetersPerSecond() {
    clearExtensionValue(ext: AirMapExtensions_default_meters_per_second)
  }

  var AirMapminMetersPerSecond: AirMapMetersPerSecond {
    get {return getExtensionValue(ext: AirMapExtensions_min_meters_per_second) ?? AirMapMetersPerSecond()}
    set {setExtensionValue(ext: AirMapExtensions_min_meters_per_second, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_min_meters_per_second`
  /// has been explicitly set.
  var hasAirMapminMetersPerSecond: Bool {
    return hasExtensionValue(ext: AirMapExtensions_min_meters_per_second)
  }
  /// Clears the value of extension `AirMapExtensions_min_meters_per_second`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapminMetersPerSecond() {
    clearExtensionValue(ext: AirMapExtensions_min_meters_per_second)
  }

  var AirMapmaxMetersPerSecond: AirMapMetersPerSecond {
    get {return getExtensionValue(ext: AirMapExtensions_max_meters_per_second) ?? AirMapMetersPerSecond()}
    set {setExtensionValue(ext: AirMapExtensions_max_meters_per_second, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_max_meters_per_second`
  /// has been explicitly set.
  var hasAirMapmaxMetersPerSecond: Bool {
    return hasExtensionValue(ext: AirMapExtensions_max_meters_per_second)
  }
  /// Clears the value of extension `AirMapExtensions_max_meters_per_second`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapmaxMetersPerSecond() {
    clearExtensionValue(ext: AirMapExtensions_max_meters_per_second)
  }

  var AirMapdefaultPascals: AirMapPascal {
    get {return getExtensionValue(ext: AirMapExtensions_default_pascals) ?? AirMapPascal()}
    set {setExtensionValue(ext: AirMapExtensions_default_pascals, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_default_pascals`
  /// has been explicitly set.
  var hasAirMapdefaultPascals: Bool {
    return hasExtensionValue(ext: AirMapExtensions_default_pascals)
  }
  /// Clears the value of extension `AirMapExtensions_default_pascals`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapdefaultPascals() {
    clearExtensionValue(ext: AirMapExtensions_default_pascals)
  }

  var AirMapminPascals: AirMapPascal {
    get {return getExtensionValue(ext: AirMapExtensions_min_pascals) ?? AirMapPascal()}
    set {setExtensionValue(ext: AirMapExtensions_min_pascals, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_min_pascals`
  /// has been explicitly set.
  var hasAirMapminPascals: Bool {
    return hasExtensionValue(ext: AirMapExtensions_min_pascals)
  }
  /// Clears the value of extension `AirMapExtensions_min_pascals`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapminPascals() {
    clearExtensionValue(ext: AirMapExtensions_min_pascals)
  }

  var AirMapmaxPascals: AirMapPascal {
    get {return getExtensionValue(ext: AirMapExtensions_max_pascals) ?? AirMapPascal()}
    set {setExtensionValue(ext: AirMapExtensions_max_pascals, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_max_pascals`
  /// has been explicitly set.
  var hasAirMapmaxPascals: Bool {
    return hasExtensionValue(ext: AirMapExtensions_max_pascals)
  }
  /// Clears the value of extension `AirMapExtensions_max_pascals`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapmaxPascals() {
    clearExtensionValue(ext: AirMapExtensions_max_pascals)
  }

  var AirMapdefaultCelsius: AirMapCelsius {
    get {return getExtensionValue(ext: AirMapExtensions_default_celsius) ?? AirMapCelsius()}
    set {setExtensionValue(ext: AirMapExtensions_default_celsius, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_default_celsius`
  /// has been explicitly set.
  var hasAirMapdefaultCelsius: Bool {
    return hasExtensionValue(ext: AirMapExtensions_default_celsius)
  }
  /// Clears the value of extension `AirMapExtensions_default_celsius`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapdefaultCelsius() {
    clearExtensionValue(ext: AirMapExtensions_default_celsius)
  }

  var AirMapminCelsius: AirMapCelsius {
    get {return getExtensionValue(ext: AirMapExtensions_min_celsius) ?? AirMapCelsius()}
    set {setExtensionValue(ext: AirMapExtensions_min_celsius, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_min_celsius`
  /// has been explicitly set.
  var hasAirMapminCelsius: Bool {
    return hasExtensionValue(ext: AirMapExtensions_min_celsius)
  }
  /// Clears the value of extension `AirMapExtensions_min_celsius`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapminCelsius() {
    clearExtensionValue(ext: AirMapExtensions_min_celsius)
  }

  var AirMapmaxCelsius: AirMapCelsius {
    get {return getExtensionValue(ext: AirMapExtensions_max_celsius) ?? AirMapCelsius()}
    set {setExtensionValue(ext: AirMapExtensions_max_celsius, value: newValue)}
  }
  /// Returns true if extension `AirMapExtensions_max_celsius`
  /// has been explicitly set.
  var hasAirMapmaxCelsius: Bool {
    return hasExtensionValue(ext: AirMapExtensions_max_celsius)
  }
  /// Clears the value of extension `AirMapExtensions_max_celsius`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAirMapmaxCelsius() {
    clearExtensionValue(ext: AirMapExtensions_max_celsius)
  }

}

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let AirMapExtensions_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  AirMapExtensions_nullable,
  AirMapExtensions_format,
  AirMapExtensions_default_degrees,
  AirMapExtensions_min_degrees,
  AirMapExtensions_max_degrees,
  AirMapExtensions_default_meters,
  AirMapExtensions_min_meters,
  AirMapExtensions_max_meters,
  AirMapExtensions_default_meters_per_second,
  AirMapExtensions_min_meters_per_second,
  AirMapExtensions_max_meters_per_second,
  AirMapExtensions_default_pascals,
  AirMapExtensions_min_pascals,
  AirMapExtensions_max_pascals,
  AirMapExtensions_default_celsius,
  AirMapExtensions_min_celsius,
  AirMapExtensions_max_celsius
]

/// All fields in a message are considered optional and it is left up to application code
/// to handle a field missing properly. For that, we introduce the extension 'nullable' and
/// the following semantic in the context of this proto:
/// Any field that is missing and that is not marked with 'nullable = true' is considered an error.
let AirMapExtensions_nullable = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50000,
  fieldName: "airmap.nullable"
)

/// Helps to further specify string formats
let AirMapExtensions_format = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50001,
  fieldName: "airmap.format"
)

/// We put the following extensions here and reserve them for future use.
let AirMapExtensions_default_degrees = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapDegrees>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50002,
  fieldName: "airmap.default_degrees"
)

let AirMapExtensions_min_degrees = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapDegrees>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50003,
  fieldName: "airmap.min_degrees"
)

let AirMapExtensions_max_degrees = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapDegrees>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50004,
  fieldName: "airmap.max_degrees"
)

let AirMapExtensions_default_meters = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapMeters>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50005,
  fieldName: "airmap.default_meters"
)

let AirMapExtensions_min_meters = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapMeters>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50006,
  fieldName: "airmap.min_meters"
)

let AirMapExtensions_max_meters = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapMeters>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50007,
  fieldName: "airmap.max_meters"
)

let AirMapExtensions_default_meters_per_second = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapMetersPerSecond>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50008,
  fieldName: "airmap.default_meters_per_second"
)

let AirMapExtensions_min_meters_per_second = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapMetersPerSecond>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50009,
  fieldName: "airmap.min_meters_per_second"
)

let AirMapExtensions_max_meters_per_second = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapMetersPerSecond>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50010,
  fieldName: "airmap.max_meters_per_second"
)

let AirMapExtensions_default_pascals = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapPascal>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50011,
  fieldName: "airmap.default_pascals"
)

let AirMapExtensions_min_pascals = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapPascal>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50012,
  fieldName: "airmap.min_pascals"
)

let AirMapExtensions_max_pascals = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapPascal>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50013,
  fieldName: "airmap.max_pascals"
)

let AirMapExtensions_default_celsius = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapCelsius>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50014,
  fieldName: "airmap.default_celsius"
)

let AirMapExtensions_min_celsius = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapCelsius>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50015,
  fieldName: "airmap.min_celsius"
)

let AirMapExtensions_max_celsius = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<AirMapCelsius>, Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50016,
  fieldName: "airmap.max_celsius"
)
