// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: units/units_ext.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

// MARK: - Extension support defined in units_ext.proto.

extension SwiftProtobuf.Google_Protobuf_FieldOptions {

  var Units_defaultDegrees: Units_Degrees {
    get {return getExtensionValue(ext: Units_Extensions_default_degrees) ?? Units_Degrees()}
    set {setExtensionValue(ext: Units_Extensions_default_degrees, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_default_degrees`
  /// has been explicitly set.
  var hasUnits_defaultDegrees: Bool {
    return hasExtensionValue(ext: Units_Extensions_default_degrees)
  }
  /// Clears the value of extension `Units_Extensions_default_degrees`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_defaultDegrees() {
    clearExtensionValue(ext: Units_Extensions_default_degrees)
  }

  var Units_minDegrees: Units_Degrees {
    get {return getExtensionValue(ext: Units_Extensions_min_degrees) ?? Units_Degrees()}
    set {setExtensionValue(ext: Units_Extensions_min_degrees, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_min_degrees`
  /// has been explicitly set.
  var hasUnits_minDegrees: Bool {
    return hasExtensionValue(ext: Units_Extensions_min_degrees)
  }
  /// Clears the value of extension `Units_Extensions_min_degrees`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_minDegrees() {
    clearExtensionValue(ext: Units_Extensions_min_degrees)
  }

  var Units_maxDegrees: Units_Degrees {
    get {return getExtensionValue(ext: Units_Extensions_max_degrees) ?? Units_Degrees()}
    set {setExtensionValue(ext: Units_Extensions_max_degrees, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_max_degrees`
  /// has been explicitly set.
  var hasUnits_maxDegrees: Bool {
    return hasExtensionValue(ext: Units_Extensions_max_degrees)
  }
  /// Clears the value of extension `Units_Extensions_max_degrees`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_maxDegrees() {
    clearExtensionValue(ext: Units_Extensions_max_degrees)
  }

  var Units_defaultMeters: Units_Meters {
    get {return getExtensionValue(ext: Units_Extensions_default_meters) ?? Units_Meters()}
    set {setExtensionValue(ext: Units_Extensions_default_meters, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_default_meters`
  /// has been explicitly set.
  var hasUnits_defaultMeters: Bool {
    return hasExtensionValue(ext: Units_Extensions_default_meters)
  }
  /// Clears the value of extension `Units_Extensions_default_meters`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_defaultMeters() {
    clearExtensionValue(ext: Units_Extensions_default_meters)
  }

  var Units_minMeters: Units_Meters {
    get {return getExtensionValue(ext: Units_Extensions_min_meters) ?? Units_Meters()}
    set {setExtensionValue(ext: Units_Extensions_min_meters, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_min_meters`
  /// has been explicitly set.
  var hasUnits_minMeters: Bool {
    return hasExtensionValue(ext: Units_Extensions_min_meters)
  }
  /// Clears the value of extension `Units_Extensions_min_meters`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_minMeters() {
    clearExtensionValue(ext: Units_Extensions_min_meters)
  }

  var Units_maxMeters: Units_Meters {
    get {return getExtensionValue(ext: Units_Extensions_max_meters) ?? Units_Meters()}
    set {setExtensionValue(ext: Units_Extensions_max_meters, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_max_meters`
  /// has been explicitly set.
  var hasUnits_maxMeters: Bool {
    return hasExtensionValue(ext: Units_Extensions_max_meters)
  }
  /// Clears the value of extension `Units_Extensions_max_meters`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_maxMeters() {
    clearExtensionValue(ext: Units_Extensions_max_meters)
  }

  var Units_defaultMetersPerSecond: Units_MetersPerSecond {
    get {return getExtensionValue(ext: Units_Extensions_default_meters_per_second) ?? Units_MetersPerSecond()}
    set {setExtensionValue(ext: Units_Extensions_default_meters_per_second, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_default_meters_per_second`
  /// has been explicitly set.
  var hasUnits_defaultMetersPerSecond: Bool {
    return hasExtensionValue(ext: Units_Extensions_default_meters_per_second)
  }
  /// Clears the value of extension `Units_Extensions_default_meters_per_second`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_defaultMetersPerSecond() {
    clearExtensionValue(ext: Units_Extensions_default_meters_per_second)
  }

  var Units_minMetersPerSecond: Units_MetersPerSecond {
    get {return getExtensionValue(ext: Units_Extensions_min_meters_per_second) ?? Units_MetersPerSecond()}
    set {setExtensionValue(ext: Units_Extensions_min_meters_per_second, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_min_meters_per_second`
  /// has been explicitly set.
  var hasUnits_minMetersPerSecond: Bool {
    return hasExtensionValue(ext: Units_Extensions_min_meters_per_second)
  }
  /// Clears the value of extension `Units_Extensions_min_meters_per_second`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_minMetersPerSecond() {
    clearExtensionValue(ext: Units_Extensions_min_meters_per_second)
  }

  var Units_maxMetersPerSecond: Units_MetersPerSecond {
    get {return getExtensionValue(ext: Units_Extensions_max_meters_per_second) ?? Units_MetersPerSecond()}
    set {setExtensionValue(ext: Units_Extensions_max_meters_per_second, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_max_meters_per_second`
  /// has been explicitly set.
  var hasUnits_maxMetersPerSecond: Bool {
    return hasExtensionValue(ext: Units_Extensions_max_meters_per_second)
  }
  /// Clears the value of extension `Units_Extensions_max_meters_per_second`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_maxMetersPerSecond() {
    clearExtensionValue(ext: Units_Extensions_max_meters_per_second)
  }

  var Units_defaultPascals: Units_Pascals {
    get {return getExtensionValue(ext: Units_Extensions_default_pascals) ?? Units_Pascals()}
    set {setExtensionValue(ext: Units_Extensions_default_pascals, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_default_pascals`
  /// has been explicitly set.
  var hasUnits_defaultPascals: Bool {
    return hasExtensionValue(ext: Units_Extensions_default_pascals)
  }
  /// Clears the value of extension `Units_Extensions_default_pascals`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_defaultPascals() {
    clearExtensionValue(ext: Units_Extensions_default_pascals)
  }

  var Units_minPascals: Units_Pascals {
    get {return getExtensionValue(ext: Units_Extensions_min_pascals) ?? Units_Pascals()}
    set {setExtensionValue(ext: Units_Extensions_min_pascals, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_min_pascals`
  /// has been explicitly set.
  var hasUnits_minPascals: Bool {
    return hasExtensionValue(ext: Units_Extensions_min_pascals)
  }
  /// Clears the value of extension `Units_Extensions_min_pascals`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_minPascals() {
    clearExtensionValue(ext: Units_Extensions_min_pascals)
  }

  var Units_maxPascals: Units_Pascals {
    get {return getExtensionValue(ext: Units_Extensions_max_pascals) ?? Units_Pascals()}
    set {setExtensionValue(ext: Units_Extensions_max_pascals, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_max_pascals`
  /// has been explicitly set.
  var hasUnits_maxPascals: Bool {
    return hasExtensionValue(ext: Units_Extensions_max_pascals)
  }
  /// Clears the value of extension `Units_Extensions_max_pascals`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_maxPascals() {
    clearExtensionValue(ext: Units_Extensions_max_pascals)
  }

  var Units_defaultCelsius: Units_Celsius {
    get {return getExtensionValue(ext: Units_Extensions_default_celsius) ?? Units_Celsius()}
    set {setExtensionValue(ext: Units_Extensions_default_celsius, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_default_celsius`
  /// has been explicitly set.
  var hasUnits_defaultCelsius: Bool {
    return hasExtensionValue(ext: Units_Extensions_default_celsius)
  }
  /// Clears the value of extension `Units_Extensions_default_celsius`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_defaultCelsius() {
    clearExtensionValue(ext: Units_Extensions_default_celsius)
  }

  var Units_minCelsius: Units_Celsius {
    get {return getExtensionValue(ext: Units_Extensions_min_celsius) ?? Units_Celsius()}
    set {setExtensionValue(ext: Units_Extensions_min_celsius, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_min_celsius`
  /// has been explicitly set.
  var hasUnits_minCelsius: Bool {
    return hasExtensionValue(ext: Units_Extensions_min_celsius)
  }
  /// Clears the value of extension `Units_Extensions_min_celsius`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_minCelsius() {
    clearExtensionValue(ext: Units_Extensions_min_celsius)
  }

  var Units_maxCelsius: Units_Celsius {
    get {return getExtensionValue(ext: Units_Extensions_max_celsius) ?? Units_Celsius()}
    set {setExtensionValue(ext: Units_Extensions_max_celsius, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_max_celsius`
  /// has been explicitly set.
  var hasUnits_maxCelsius: Bool {
    return hasExtensionValue(ext: Units_Extensions_max_celsius)
  }
  /// Clears the value of extension `Units_Extensions_max_celsius`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_maxCelsius() {
    clearExtensionValue(ext: Units_Extensions_max_celsius)
  }

  var Units_defaultMetersPerSecondSquared: Units_MetersPerSecondSquared {
    get {return getExtensionValue(ext: Units_Extensions_default_meters_per_second_squared) ?? Units_MetersPerSecondSquared()}
    set {setExtensionValue(ext: Units_Extensions_default_meters_per_second_squared, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_default_meters_per_second_squared`
  /// has been explicitly set.
  var hasUnits_defaultMetersPerSecondSquared: Bool {
    return hasExtensionValue(ext: Units_Extensions_default_meters_per_second_squared)
  }
  /// Clears the value of extension `Units_Extensions_default_meters_per_second_squared`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_defaultMetersPerSecondSquared() {
    clearExtensionValue(ext: Units_Extensions_default_meters_per_second_squared)
  }

  var Units_minMetersPerSecondSquared: Units_MetersPerSecondSquared {
    get {return getExtensionValue(ext: Units_Extensions_min_meters_per_second_squared) ?? Units_MetersPerSecondSquared()}
    set {setExtensionValue(ext: Units_Extensions_min_meters_per_second_squared, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_min_meters_per_second_squared`
  /// has been explicitly set.
  var hasUnits_minMetersPerSecondSquared: Bool {
    return hasExtensionValue(ext: Units_Extensions_min_meters_per_second_squared)
  }
  /// Clears the value of extension `Units_Extensions_min_meters_per_second_squared`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_minMetersPerSecondSquared() {
    clearExtensionValue(ext: Units_Extensions_min_meters_per_second_squared)
  }

  var Units_maxMetersPerSecondSquared: Units_MetersPerSecondSquared {
    get {return getExtensionValue(ext: Units_Extensions_max_meters_per_second_squared) ?? Units_MetersPerSecondSquared()}
    set {setExtensionValue(ext: Units_Extensions_max_meters_per_second_squared, value: newValue)}
  }
  /// Returns true if extension `Units_Extensions_max_meters_per_second_squared`
  /// has been explicitly set.
  var hasUnits_maxMetersPerSecondSquared: Bool {
    return hasExtensionValue(ext: Units_Extensions_max_meters_per_second_squared)
  }
  /// Clears the value of extension `Units_Extensions_max_meters_per_second_squared`.
  /// Subsequent reads from it will return its default value.
  mutating func clearUnits_maxMetersPerSecondSquared() {
    clearExtensionValue(ext: Units_Extensions_max_meters_per_second_squared)
  }

}

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Units_UnitsExt_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Units_Extensions_default_degrees,
  Units_Extensions_min_degrees,
  Units_Extensions_max_degrees,
  Units_Extensions_default_meters,
  Units_Extensions_min_meters,
  Units_Extensions_max_meters,
  Units_Extensions_default_meters_per_second,
  Units_Extensions_min_meters_per_second,
  Units_Extensions_max_meters_per_second,
  Units_Extensions_default_pascals,
  Units_Extensions_min_pascals,
  Units_Extensions_max_pascals,
  Units_Extensions_default_celsius,
  Units_Extensions_min_celsius,
  Units_Extensions_max_celsius,
  Units_Extensions_default_meters_per_second_squared,
  Units_Extensions_min_meters_per_second_squared,
  Units_Extensions_max_meters_per_second_squared
]

let Units_Extensions_default_degrees = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Degrees>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60002,
  fieldName: "units.default_degrees"
)

let Units_Extensions_min_degrees = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Degrees>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60003,
  fieldName: "units.min_degrees"
)

let Units_Extensions_max_degrees = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Degrees>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60004,
  fieldName: "units.max_degrees"
)

let Units_Extensions_default_meters = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Meters>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60005,
  fieldName: "units.default_meters"
)

let Units_Extensions_min_meters = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Meters>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60006,
  fieldName: "units.min_meters"
)

let Units_Extensions_max_meters = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Meters>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60007,
  fieldName: "units.max_meters"
)

let Units_Extensions_default_meters_per_second = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_MetersPerSecond>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60008,
  fieldName: "units.default_meters_per_second"
)

let Units_Extensions_min_meters_per_second = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_MetersPerSecond>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60009,
  fieldName: "units.min_meters_per_second"
)

let Units_Extensions_max_meters_per_second = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_MetersPerSecond>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60010,
  fieldName: "units.max_meters_per_second"
)

let Units_Extensions_default_pascals = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Pascals>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60011,
  fieldName: "units.default_pascals"
)

let Units_Extensions_min_pascals = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Pascals>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60012,
  fieldName: "units.min_pascals"
)

let Units_Extensions_max_pascals = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Pascals>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60013,
  fieldName: "units.max_pascals"
)

let Units_Extensions_default_celsius = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Celsius>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60014,
  fieldName: "units.default_celsius"
)

let Units_Extensions_min_celsius = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Celsius>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60015,
  fieldName: "units.min_celsius"
)

let Units_Extensions_max_celsius = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_Celsius>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60016,
  fieldName: "units.max_celsius"
)

let Units_Extensions_default_meters_per_second_squared = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_MetersPerSecondSquared>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60020,
  fieldName: "units.default_meters_per_second_squared"
)

let Units_Extensions_min_meters_per_second_squared = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_MetersPerSecondSquared>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60021,
  fieldName: "units.min_meters_per_second_squared"
)

let Units_Extensions_max_meters_per_second_squared = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Units_MetersPerSecondSquared>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 60022,
  fieldName: "units.max_meters_per_second_squared"
)
