// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: remoteid/remoteid.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MonitorAreaParameters bundles parameters used in the MonitorOperationsArea rpc.
struct Remoteid_MonitorAreaParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The area of interest to monitor. *Diagonal span must not exceed 3.6km*
  var areaOfInterest: Geo_BoundingBox {
    get {return _storage._areaOfInterest ?? Geo_BoundingBox()}
    set {_uniqueStorage()._areaOfInterest = newValue}
  }
  /// Returns true if `areaOfInterest` has been explicitly set.
  var hasAreaOfInterest: Bool {return _storage._areaOfInterest != nil}
  /// Clears the value of `areaOfInterest`. Subsequent reads from it will return its default value.
  mutating func clearAreaOfInterest() {_uniqueStorage()._areaOfInterest = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Remoteid_MonitorAreaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// details is a discriminated union of response types
  var details: OneOf_Details? {
    get {return _storage._details}
    set {_uniqueStorage()._details = newValue}
  }

  /// Operation entered the area and was added to list of active operations.
  var added: Remoteid_MonitorAreaResponse.Added {
    get {
      if case .added(let v)? = _storage._details {return v}
      return Remoteid_MonitorAreaResponse.Added()
    }
    set {_uniqueStorage()._details = .added(newValue)}
  }

  /// Operation in the monitored area was updated.
  var updated: Remoteid_MonitorAreaResponse.Updated {
    get {
      if case .updated(let v)? = _storage._details {return v}
      return Remoteid_MonitorAreaResponse.Updated()
    }
    set {_uniqueStorage()._details = .updated(newValue)}
  }

  /// Operation exited the area and was removed from the list of active operations.
  var removed: Remoteid_MonitorAreaResponse.Removed {
    get {
      if case .removed(let v)? = _storage._details {return v}
      return Remoteid_MonitorAreaResponse.Removed()
    }
    set {_uniqueStorage()._details = .removed(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// details is a discriminated union of response types
  enum OneOf_Details: Equatable {
    /// Operation entered the area and was added to list of active operations.
    case added(Remoteid_MonitorAreaResponse.Added)
    /// Operation in the monitored area was updated.
    case updated(Remoteid_MonitorAreaResponse.Updated)
    /// Operation exited the area and was removed from the list of active operations.
    case removed(Remoteid_MonitorAreaResponse.Removed)

  #if !swift(>=4.1)
    static func ==(lhs: Remoteid_MonitorAreaResponse.OneOf_Details, rhs: Remoteid_MonitorAreaResponse.OneOf_Details) -> Bool {
      switch (lhs, rhs) {
      case (.added(let l), .added(let r)): return l == r
      case (.updated(let l), .updated(let r)): return l == r
      case (.removed(let l), .removed(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Added models an operation that has entered the monitored area.
  struct Added {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// New operation that has entered the area.
    var operation: Remoteid_Operation {
      get {return _storage._operation ?? Remoteid_Operation()}
      set {_uniqueStorage()._operation = newValue}
    }
    /// Returns true if `operation` has been explicitly set.
    var hasOperation: Bool {return _storage._operation != nil}
    /// Clears the value of `operation`. Subsequent reads from it will return its default value.
    mutating func clearOperation() {_uniqueStorage()._operation = nil}

    /// Batch of recent positions for the aircraft.
    var positions: [Geo_Position4D] {
      get {return _storage._positions}
      set {_uniqueStorage()._positions = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Updated models an operation that has been updated in the monitored area.
  struct Updated {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// details is a discriminated union of update types
    var details: OneOf_Details? {
      get {return _storage._details}
      set {_uniqueStorage()._details = newValue}
    }

    /// Operation that has been updated.
    var operation: Remoteid_Operation {
      get {
        if case .operation(let v)? = _storage._details {return v}
        return Remoteid_Operation()
      }
      set {_uniqueStorage()._details = .operation(newValue)}
    }

    /// State that has been updated.
    var state: Remoteid_Operation.State {
      get {
        if case .state(let v)? = _storage._details {return v}
        return Remoteid_Operation.State()
      }
      set {_uniqueStorage()._details = .state(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// details is a discriminated union of update types
    enum OneOf_Details: Equatable {
      /// Operation that has been updated.
      case operation(Remoteid_Operation)
      /// State that has been updated.
      case state(Remoteid_Operation.State)

    #if !swift(>=4.1)
      static func ==(lhs: Remoteid_MonitorAreaResponse.Updated.OneOf_Details, rhs: Remoteid_MonitorAreaResponse.Updated.OneOf_Details) -> Bool {
        switch (lhs, rhs) {
        case (.operation(let l), .operation(let r)): return l == r
        case (.state(let l), .state(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Removed models an operation that has been removed from the monitored area.
  struct Removed {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Identifier for the operation that exited the monitored area.
    var id: Ids_Operation {
      get {return _storage._id ?? Ids_Operation()}
      set {_uniqueStorage()._id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {_uniqueStorage()._id = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Operation models an aerial operation in a given area.
struct Remoteid_Operation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique id for the operation.
  var id: Ids_Operation {
    get {return _storage._id ?? Ids_Operation()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  /// Operator responsible for the operation.
  var `operator`: Remoteid_Operator {
    get {return _storage._operator ?? Remoteid_Operator()}
    set {_uniqueStorage()._operator = newValue}
  }
  /// Returns true if ``operator`` has been explicitly set.
  var hasOperator: Bool {return _storage._operator != nil}
  /// Clears the value of ``operator``. Subsequent reads from it will return its default value.
  mutating func clearOperator() {_uniqueStorage()._operator = nil}

  /// Aircraft performing the operation.
  var aircraft: Remoteid_Aircraft {
    get {return _storage._aircraft ?? Remoteid_Aircraft()}
    set {_uniqueStorage()._aircraft = newValue}
  }
  /// Returns true if `aircraft` has been explicitly set.
  var hasAircraft: Bool {return _storage._aircraft != nil}
  /// Clears the value of `aircraft`. Subsequent reads from it will return its default value.
  mutating func clearAircraft() {_uniqueStorage()._aircraft = nil}

  /// Geographic operating area.
  var geometry: Geo_Polygon {
    get {return _storage._geometry ?? Geo_Polygon()}
    set {_uniqueStorage()._geometry = newValue}
  }
  /// Returns true if `geometry` has been explicitly set.
  var hasGeometry: Bool {return _storage._geometry != nil}
  /// Clears the value of `geometry`. Subsequent reads from it will return its default value.
  mutating func clearGeometry() {_uniqueStorage()._geometry = nil}

  /// Description of the operation's purpose.
  var purpose: String {
    get {return _storage._purpose}
    set {_uniqueStorage()._purpose = newValue}
  }

  /// Operation is simulated without a physical aircraft.
  var simulated: Bool {
    get {return _storage._simulated}
    set {_uniqueStorage()._simulated = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// State models an operation's current state
  struct State {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The operation the state is associated with.
    var id: Ids_Operation {
      get {return _storage._id ?? Ids_Operation()}
      set {_uniqueStorage()._id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return _storage._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {_uniqueStorage()._id = nil}

    /// Time of applicability.
    var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_uniqueStorage()._timestamp = newValue}
    }
    /// Returns true if `timestamp` has been explicitly set.
    var hasTimestamp: Bool {return _storage._timestamp != nil}
    /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
    mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

    /// Location of the aircraft.
    var position: Measurements_Position.Absolute {
      get {return _storage._position ?? Measurements_Position.Absolute()}
      set {_uniqueStorage()._position = newValue}
    }
    /// Returns true if `position` has been explicitly set.
    var hasPosition: Bool {return _storage._position != nil}
    /// Clears the value of `position`. Subsequent reads from it will return its default value.
    mutating func clearPosition() {_uniqueStorage()._position = nil}

    /// Velocity of the aircraft.
    var velocity: Measurements_Velocity.Polar {
      get {return _storage._velocity ?? Measurements_Velocity.Polar()}
      set {_uniqueStorage()._velocity = newValue}
    }
    /// Returns true if `velocity` has been explicitly set.
    var hasVelocity: Bool {return _storage._velocity != nil}
    /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
    mutating func clearVelocity() {_uniqueStorage()._velocity = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Operator models the operator of an aircraft
struct Remoteid_Operator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique identifier of the operator
  var id: Ids_Operator {
    get {return _storage._id ?? Ids_Operator()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  /// Location of the operator
  var location: Geo_Coordinate2D {
    get {return _storage._location ?? Geo_Coordinate2D()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_uniqueStorage()._location = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Aircraft models the vehicle performing an operation.
struct Remoteid_Aircraft {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of aircraft.
  var type: Remoteid_Aircraft.TypeEnum = .unknown

  /// Manufacturer-assigned serial number of the aircraft.
  var serial: String = String()

  /// CAA-issued aircraft registration.
  var registration: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case airplane // = 1
    case rotorcraft // = 2
    case gyroplane // = 3
    case vtol // = 4
    case ornithopter // = 5
    case glider // = 6
    case kite // = 7
    case freeBaloon // = 8
    case captiveBalloon // = 9
    case airship // = 10
    case freeFallOrParachute // = 11
    case rocket // = 12
    case groundObstacle // = 13
    case other // = 14
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .airplane
      case 2: self = .rotorcraft
      case 3: self = .gyroplane
      case 4: self = .vtol
      case 5: self = .ornithopter
      case 6: self = .glider
      case 7: self = .kite
      case 8: self = .freeBaloon
      case 9: self = .captiveBalloon
      case 10: self = .airship
      case 11: self = .freeFallOrParachute
      case 12: self = .rocket
      case 13: self = .groundObstacle
      case 14: self = .other
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .airplane: return 1
      case .rotorcraft: return 2
      case .gyroplane: return 3
      case .vtol: return 4
      case .ornithopter: return 5
      case .glider: return 6
      case .kite: return 7
      case .freeBaloon: return 8
      case .captiveBalloon: return 9
      case .airship: return 10
      case .freeFallOrParachute: return 11
      case .rocket: return 12
      case .groundObstacle: return 13
      case .other: return 14
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Remoteid_Aircraft.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Remoteid_Aircraft.TypeEnum] = [
    .unknown,
    .airplane,
    .rotorcraft,
    .gyroplane,
    .vtol,
    .ornithopter,
    .glider,
    .kite,
    .freeBaloon,
    .captiveBalloon,
    .airship,
    .freeFallOrParachute,
    .rocket,
    .groundObstacle,
    .other,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "remoteid"

extension Remoteid_MonitorAreaParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MonitorAreaParameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "area_of_interest"),
  ]

  fileprivate class _StorageClass {
    var _areaOfInterest: Geo_BoundingBox? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _areaOfInterest = source._areaOfInterest
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._areaOfInterest)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._areaOfInterest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Remoteid_MonitorAreaParameters, rhs: Remoteid_MonitorAreaParameters) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._areaOfInterest != rhs_storage._areaOfInterest {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Remoteid_MonitorAreaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MonitorAreaResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "added"),
    2: .same(proto: "updated"),
    3: .same(proto: "removed"),
  ]

  fileprivate class _StorageClass {
    var _details: Remoteid_MonitorAreaResponse.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Remoteid_MonitorAreaResponse.Added?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .added(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .added(v)}
        case 2:
          var v: Remoteid_MonitorAreaResponse.Updated?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .updated(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .updated(v)}
        case 3:
          var v: Remoteid_MonitorAreaResponse.Removed?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .removed(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .removed(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .added(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .updated(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .removed(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Remoteid_MonitorAreaResponse, rhs: Remoteid_MonitorAreaResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Remoteid_MonitorAreaResponse.Added: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Remoteid_MonitorAreaResponse.protoMessageName + ".Added"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .same(proto: "positions"),
  ]

  fileprivate class _StorageClass {
    var _operation: Remoteid_Operation? = nil
    var _positions: [Geo_Position4D] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operation = source._operation
      _positions = source._positions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._operation)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._positions)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._operation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._positions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._positions, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Remoteid_MonitorAreaResponse.Added, rhs: Remoteid_MonitorAreaResponse.Added) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operation != rhs_storage._operation {return false}
        if _storage._positions != rhs_storage._positions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Remoteid_MonitorAreaResponse.Updated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Remoteid_MonitorAreaResponse.protoMessageName + ".Updated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .same(proto: "state"),
  ]

  fileprivate class _StorageClass {
    var _details: Remoteid_MonitorAreaResponse.Updated.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Remoteid_Operation?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .operation(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .operation(v)}
        case 2:
          var v: Remoteid_Operation.State?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .state(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .state(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .operation(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .state(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Remoteid_MonitorAreaResponse.Updated, rhs: Remoteid_MonitorAreaResponse.Updated) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Remoteid_MonitorAreaResponse.Removed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Remoteid_MonitorAreaResponse.protoMessageName + ".Removed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  fileprivate class _StorageClass {
    var _id: Ids_Operation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Remoteid_MonitorAreaResponse.Removed, rhs: Remoteid_MonitorAreaResponse.Removed) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Remoteid_Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Operation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "operator"),
    3: .same(proto: "aircraft"),
    4: .same(proto: "geometry"),
    5: .same(proto: "purpose"),
    6: .same(proto: "simulated"),
  ]

  fileprivate class _StorageClass {
    var _id: Ids_Operation? = nil
    var _operator: Remoteid_Operator? = nil
    var _aircraft: Remoteid_Aircraft? = nil
    var _geometry: Geo_Polygon? = nil
    var _purpose: String = String()
    var _simulated: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _operator = source._operator
      _aircraft = source._aircraft
      _geometry = source._geometry
      _purpose = source._purpose
      _simulated = source._simulated
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._operator)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._aircraft)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._geometry)
        case 5: try decoder.decodeSingularStringField(value: &_storage._purpose)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._simulated)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._operator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._aircraft {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._geometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._purpose.isEmpty {
        try visitor.visitSingularStringField(value: _storage._purpose, fieldNumber: 5)
      }
      if _storage._simulated != false {
        try visitor.visitSingularBoolField(value: _storage._simulated, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Remoteid_Operation, rhs: Remoteid_Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._operator != rhs_storage._operator {return false}
        if _storage._aircraft != rhs_storage._aircraft {return false}
        if _storage._geometry != rhs_storage._geometry {return false}
        if _storage._purpose != rhs_storage._purpose {return false}
        if _storage._simulated != rhs_storage._simulated {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Remoteid_Operation.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Remoteid_Operation.protoMessageName + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "position"),
    4: .same(proto: "velocity"),
  ]

  fileprivate class _StorageClass {
    var _id: Ids_Operation? = nil
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _position: Measurements_Position.Absolute? = nil
    var _velocity: Measurements_Velocity.Polar? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _timestamp = source._timestamp
      _position = source._position
      _velocity = source._velocity
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._position)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._velocity)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._velocity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Remoteid_Operation.State, rhs: Remoteid_Operation.State) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._velocity != rhs_storage._velocity {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Remoteid_Operator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Operator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _id: Ids_Operator? = nil
    var _location: Geo_Coordinate2D? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _location = source._location
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._location)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Remoteid_Operator, rhs: Remoteid_Operator) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._location != rhs_storage._location {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Remoteid_Aircraft: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Aircraft"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    4: .same(proto: "serial"),
    5: .same(proto: "registration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 4: try decoder.decodeSingularStringField(value: &self.serial)
      case 5: try decoder.decodeSingularStringField(value: &self.registration)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.serial.isEmpty {
      try visitor.visitSingularStringField(value: self.serial, fieldNumber: 4)
    }
    if !self.registration.isEmpty {
      try visitor.visitSingularStringField(value: self.registration, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Remoteid_Aircraft, rhs: Remoteid_Aircraft) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.serial != rhs.serial {return false}
    if lhs.registration != rhs.registration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Remoteid_Aircraft.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "AIRPLANE"),
    2: .same(proto: "ROTORCRAFT"),
    3: .same(proto: "GYROPLANE"),
    4: .same(proto: "VTOL"),
    5: .same(proto: "ORNITHOPTER"),
    6: .same(proto: "GLIDER"),
    7: .same(proto: "KITE"),
    8: .same(proto: "FREE_BALOON"),
    9: .same(proto: "CAPTIVE_BALLOON"),
    10: .same(proto: "AIRSHIP"),
    11: .same(proto: "FREE_FALL_OR_PARACHUTE"),
    12: .same(proto: "ROCKET"),
    13: .same(proto: "GROUND_OBSTACLE"),
    14: .same(proto: "OTHER"),
  ]
}
