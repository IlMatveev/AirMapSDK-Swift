// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry/telemetry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Update wraps types used in the exchange of telemetry updates with a collector.
struct Telemetry_Update {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// FromProvider wraps messages being sent from a provider to a collector.
  struct FromProvider {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var details: OneOf_Details? {
      get {return _storage._details}
      set {_uniqueStorage()._details = newValue}
    }

    /// Collector operational status.
    var status: System_Status {
      get {
        if case .status(let v)? = _storage._details {return v}
        return System_Status()
      }
      set {_uniqueStorage()._details = .status(newValue)}
    }

    /// A report from a provider
    var report: Telemetry_Report {
      get {
        if case .report(let v)? = _storage._details {return v}
        return Telemetry_Report()
      }
      set {_uniqueStorage()._details = .report(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Details: Equatable {
      /// Collector operational status.
      case status(System_Status)
      /// A report from a provider
      case report(Telemetry_Report)

    #if !swift(>=4.1)
      static func ==(lhs: Telemetry_Update.FromProvider.OneOf_Details, rhs: Telemetry_Update.FromProvider.OneOf_Details) -> Bool {
        switch (lhs, rhs) {
        case (.status(let l), .status(let r)): return l == r
        case (.report(let l), .report(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// ToProvider wraps messages being sent from a collector back to a provider.
  struct ToProvider {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var details: OneOf_Details? {
      get {return _storage._details}
      set {_uniqueStorage()._details = newValue}
    }

    /// Collector operational status.
    var status: System_Status {
      get {
        if case .status(let v)? = _storage._details {return v}
        return System_Status()
      }
      set {_uniqueStorage()._details = .status(newValue)}
    }

    /// Acknowledgement of received updates.
    var ack: System_Ack {
      get {
        if case .ack(let v)? = _storage._details {return v}
        return System_Ack()
      }
      set {_uniqueStorage()._details = .ack(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Details: Equatable {
      /// Collector operational status.
      case status(System_Status)
      /// Acknowledgement of received updates.
      case ack(System_Ack)

    #if !swift(>=4.1)
      static func ==(lhs: Telemetry_Update.ToProvider.OneOf_Details, rhs: Telemetry_Update.ToProvider.OneOf_Details) -> Bool {
        switch (lhs, rhs) {
        case (.status(let l), .status(let r)): return l == r
        case (.ack(let l), .ack(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "telemetry"

extension Telemetry_Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Update"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Update, rhs: Telemetry_Update) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Update.FromProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Update.protoMessageName + ".FromProvider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "report"),
  ]

  fileprivate class _StorageClass {
    var _details: Telemetry_Update.FromProvider.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: System_Status?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .status(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .status(v)}
        case 2:
          var v: Telemetry_Report?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .report(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .report(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .status(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .report(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Update.FromProvider, rhs: Telemetry_Update.FromProvider) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Update.ToProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Update.protoMessageName + ".ToProvider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "ack"),
  ]

  fileprivate class _StorageClass {
    var _details: Telemetry_Update.ToProvider.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: System_Status?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .status(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .status(v)}
        case 2:
          var v: System_Ack?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .ack(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .ack(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .status(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .ack(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Update.ToProvider, rhs: Telemetry_Update.ToProvider) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
