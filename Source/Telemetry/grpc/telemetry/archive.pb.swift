// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry/archive.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// OperationQuery models input parameters for querying historial operation telemetry.
struct Telemetry_OperationQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The identifier for the operation being queried.
  var operation: Ids_Operation {
    get {return _storage._operation ?? Ids_Operation()}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {_uniqueStorage()._operation = nil}

  /// A timestamp for the start of a temporal range filter.
  var start: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._start ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {_uniqueStorage()._start = nil}

  /// A timestamp for the end of temporal range filter.
  var end: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._end ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {_uniqueStorage()._end = nil}

  /// The optional rate at which reports will be downsampled.
  var sampleRate: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._sampleRate ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._sampleRate = newValue}
  }
  /// Returns true if `sampleRate` has been explicitly set.
  var hasSampleRate: Bool {return _storage._sampleRate != nil}
  /// Clears the value of `sampleRate`. Subsequent reads from it will return its default value.
  mutating func clearSampleRate() {_uniqueStorage()._sampleRate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "telemetry"

extension Telemetry_OperationQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OperationQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .same(proto: "start"),
    3: .same(proto: "end"),
    4: .standard(proto: "sample_rate"),
  ]

  fileprivate class _StorageClass {
    var _operation: Ids_Operation? = nil
    var _start: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _end: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _sampleRate: SwiftProtobuf.Google_Protobuf_Duration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operation = source._operation
      _start = source._start
      _end = source._end
      _sampleRate = source._sampleRate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._operation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._start)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._end)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._sampleRate)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._operation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._sampleRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_OperationQuery, rhs: Telemetry_OperationQuery) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operation != rhs_storage._operation {return false}
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        if _storage._sampleRate != rhs_storage._sampleRate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
