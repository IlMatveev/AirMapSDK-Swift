// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry/report.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Report models a telemetry report at a given point in time.
struct Telemetry_Report {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Time the report was observed; time of applicability.
  var observed: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._observed ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._observed = newValue}
  }
  /// Returns true if `observed` has been explicitly set.
  var hasObserved: Bool {return _storage._observed != nil}
  /// Clears the value of `observed`. Subsequent reads from it will return its default value.
  mutating func clearObserved() {_uniqueStorage()._observed = nil}

  /// Identities associated with the report.
  var identities: [Tracking_Identity] {
    get {return _storage._identities}
    set {_uniqueStorage()._identities = newValue}
  }

  /// details is a discriminated union of all report types.
  var details: OneOf_Details? {
    get {return _storage._details}
    set {_uniqueStorage()._details = newValue}
  }

  var spatial: Telemetry_Report.Spatial {
    get {
      if case .spatial(let v)? = _storage._details {return v}
      return Telemetry_Report.Spatial()
    }
    set {_uniqueStorage()._details = .spatial(newValue)}
  }

  var vehicle: Telemetry_Report.Vehicle {
    get {
      if case .vehicle(let v)? = _storage._details {return v}
      return Telemetry_Report.Vehicle()
    }
    set {_uniqueStorage()._details = .vehicle(newValue)}
  }

  var atmosphere: Telemetry_Report.Atmosphere {
    get {
      if case .atmosphere(let v)? = _storage._details {return v}
      return Telemetry_Report.Atmosphere()
    }
    set {_uniqueStorage()._details = .atmosphere(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// details is a discriminated union of all report types.
  enum OneOf_Details: Equatable {
    case spatial(Telemetry_Report.Spatial)
    case vehicle(Telemetry_Report.Vehicle)
    case atmosphere(Telemetry_Report.Atmosphere)

  #if !swift(>=4.1)
    static func ==(lhs: Telemetry_Report.OneOf_Details, rhs: Telemetry_Report.OneOf_Details) -> Bool {
      switch (lhs, rhs) {
      case (.spatial(let l), .spatial(let r)): return l == r
      case (.vehicle(let l), .vehicle(let r)): return l == r
      case (.atmosphere(let l), .atmosphere(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Spatial models a spatial report
  struct Spatial {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A positional measurement. Required.
    var position: Measurements_Position {
      get {return _storage._position ?? Measurements_Position()}
      set {_uniqueStorage()._position = newValue}
    }
    /// Returns true if `position` has been explicitly set.
    var hasPosition: Bool {return _storage._position != nil}
    /// Clears the value of `position`. Subsequent reads from it will return its default value.
    mutating func clearPosition() {_uniqueStorage()._position = nil}

    /// A velocity measurement.
    var velocity: Measurements_Velocity {
      get {return _storage._velocity ?? Measurements_Velocity()}
      set {_uniqueStorage()._velocity = newValue}
    }
    /// Returns true if `velocity` has been explicitly set.
    var hasVelocity: Bool {return _storage._velocity != nil}
    /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
    mutating func clearVelocity() {_uniqueStorage()._velocity = nil}

    /// An orientation/attitude measurement.
    var orientation: Measurements_Orientation {
      get {return _storage._orientation ?? Measurements_Orientation()}
      set {_uniqueStorage()._orientation = newValue}
    }
    /// Returns true if `orientation` has been explicitly set.
    var hasOrientation: Bool {return _storage._orientation != nil}
    /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
    mutating func clearOrientation() {_uniqueStorage()._orientation = nil}

    /// An acceleration measurement.
    var acceleration: Measurements_Acceleration {
      get {return _storage._acceleration ?? Measurements_Acceleration()}
      set {_uniqueStorage()._acceleration = newValue}
    }
    /// Returns true if `acceleration` has been explicitly set.
    var hasAcceleration: Bool {return _storage._acceleration != nil}
    /// Clears the value of `acceleration`. Subsequent reads from it will return its default value.
    mutating func clearAcceleration() {_uniqueStorage()._acceleration = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Vehicle models a vehicle report
  struct Vehicle {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Detailed reports for vehicle systems.
    var systems: [Telemetry_Report.Vehicle.System] {
      get {return _storage._systems}
      set {_uniqueStorage()._systems = newValue}
    }

    /// The remaining endurance.
    var endurance: Telemetry_Report.Vehicle.Endurance {
      get {return _storage._endurance ?? Telemetry_Report.Vehicle.Endurance()}
      set {_uniqueStorage()._endurance = newValue}
    }
    /// Returns true if `endurance` has been explicitly set.
    var hasEndurance: Bool {return _storage._endurance != nil}
    /// Clears the value of `endurance`. Subsequent reads from it will return its default value.
    mutating func clearEndurance() {_uniqueStorage()._endurance = nil}

    /// A flag to indicate the vehicle is airborne.
    var airborne: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _storage._airborne ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_uniqueStorage()._airborne = newValue}
    }
    /// Returns true if `airborne` has been explicitly set.
    var hasAirborne: Bool {return _storage._airborne != nil}
    /// Clears the value of `airborne`. Subsequent reads from it will return its default value.
    mutating func clearAirborne() {_uniqueStorage()._airborne = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// System models a discrete vehicle system.
    struct System {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var details: OneOf_Details? {
        get {return _storage._details}
        set {_uniqueStorage()._details = newValue}
      }

      var electrical: Telemetry_Report.Vehicle.System.Electrical {
        get {
          if case .electrical(let v)? = _storage._details {return v}
          return Telemetry_Report.Vehicle.System.Electrical()
        }
        set {_uniqueStorage()._details = .electrical(newValue)}
      }

      var communication: Telemetry_Report.Vehicle.System.Communication {
        get {
          if case .communication(let v)? = _storage._details {return v}
          return Telemetry_Report.Vehicle.System.Communication()
        }
        set {_uniqueStorage()._details = .communication(newValue)}
      }

      var propulsion: Telemetry_Report.Vehicle.System.Propulsion {
        get {
          if case .propulsion(let v)? = _storage._details {return v}
          return Telemetry_Report.Vehicle.System.Propulsion()
        }
        set {_uniqueStorage()._details = .propulsion(newValue)}
      }

      var safety: Telemetry_Report.Vehicle.System.Safety {
        get {
          if case .safety(let v)? = _storage._details {return v}
          return Telemetry_Report.Vehicle.System.Safety()
        }
        set {_uniqueStorage()._details = .safety(newValue)}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum OneOf_Details: Equatable {
        case electrical(Telemetry_Report.Vehicle.System.Electrical)
        case communication(Telemetry_Report.Vehicle.System.Communication)
        case propulsion(Telemetry_Report.Vehicle.System.Propulsion)
        case safety(Telemetry_Report.Vehicle.System.Safety)

      #if !swift(>=4.1)
        static func ==(lhs: Telemetry_Report.Vehicle.System.OneOf_Details, rhs: Telemetry_Report.Vehicle.System.OneOf_Details) -> Bool {
          switch (lhs, rhs) {
          case (.electrical(let l), .electrical(let r)): return l == r
          case (.communication(let l), .communication(let r)): return l == r
          case (.propulsion(let l), .propulsion(let r)): return l == r
          case (.safety(let l), .safety(let r)): return l == r
          default: return false
          }
        }
      #endif
      }

      /// Electrical models the electrical system.
      struct Electrical {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var buses: [Telemetry_Report.Vehicle.System.Electrical.Bus] = []

        var batteries: [Telemetry_Report.Vehicle.System.Electrical.Battery] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Bus models an electrical bus.
        struct Bus {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// The numeric identifier for the bus [0..n].
          var number: UInt32 {
            get {return _storage._number}
            set {_uniqueStorage()._number = newValue}
          }

          /// The present voltage level in volts [V].
          var voltage: Units_Volts {
            get {return _storage._voltage ?? Units_Volts()}
            set {_uniqueStorage()._voltage = newValue}
          }
          /// Returns true if `voltage` has been explicitly set.
          var hasVoltage: Bool {return _storage._voltage != nil}
          /// Clears the value of `voltage`. Subsequent reads from it will return its default value.
          mutating func clearVoltage() {_uniqueStorage()._voltage = nil}

          /// The present load on the bus in amps. Positive values indicate a charge.
          var current: Units_Amperes {
            get {return _storage._current ?? Units_Amperes()}
            set {_uniqueStorage()._current = newValue}
          }
          /// Returns true if `current` has been explicitly set.
          var hasCurrent: Bool {return _storage._current != nil}
          /// Clears the value of `current`. Subsequent reads from it will return its default value.
          mutating func clearCurrent() {_uniqueStorage()._current = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _storage = _StorageClass.defaultInstance
        }

        /// Battery models a battery.
        struct Battery {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// The numeric identifier for the battery [0..n].
          var number: UInt32 {
            get {return _storage._number}
            set {_uniqueStorage()._number = newValue}
          }

          /// Temperature of battery in degrees Celsius[ºC].
          var temperature: Units_Celsius {
            get {return _storage._temperature ?? Units_Celsius()}
            set {_uniqueStorage()._temperature = newValue}
          }
          /// Returns true if `temperature` has been explicitly set.
          var hasTemperature: Bool {return _storage._temperature != nil}
          /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
          mutating func clearTemperature() {_uniqueStorage()._temperature = nil}

          /// The present voltage of the battery in volts[V].
          var voltage: Units_Volts {
            get {return _storage._voltage ?? Units_Volts()}
            set {_uniqueStorage()._voltage = newValue}
          }
          /// Returns true if `voltage` has been explicitly set.
          var hasVoltage: Bool {return _storage._voltage != nil}
          /// Clears the value of `voltage`. Subsequent reads from it will return its default value.
          mutating func clearVoltage() {_uniqueStorage()._voltage = nil}

          /// The present load on the battery in amps. Positive values indicate a charge.
          var current: Units_Amperes {
            get {return _storage._current ?? Units_Amperes()}
            set {_uniqueStorage()._current = newValue}
          }
          /// Returns true if `current` has been explicitly set.
          var hasCurrent: Bool {return _storage._current != nil}
          /// Clears the value of `current`. Subsequent reads from it will return its default value.
          mutating func clearCurrent() {_uniqueStorage()._current = nil}

          /// Total amount of battery capacity in ampere-hours[Ah].
          var capacity: Units_AmpereHours {
            get {return _storage._capacity ?? Units_AmpereHours()}
            set {_uniqueStorage()._capacity = newValue}
          }
          /// Returns true if `capacity` has been explicitly set.
          var hasCapacity: Bool {return _storage._capacity != nil}
          /// Clears the value of `capacity`. Subsequent reads from it will return its default value.
          mutating func clearCapacity() {_uniqueStorage()._capacity = nil}

          /// The remaining battery capacity as a % of capacity.
          var charge: Units_Percent {
            get {return _storage._charge ?? Units_Percent()}
            set {_uniqueStorage()._charge = newValue}
          }
          /// Returns true if `charge` has been explicitly set.
          var hasCharge: Bool {return _storage._charge != nil}
          /// Clears the value of `charge`. Subsequent reads from it will return its default value.
          mutating func clearCharge() {_uniqueStorage()._charge = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _storage = _StorageClass.defaultInstance
        }

        init() {}
      }

      /// Propulsion models the propulsion system.
      struct Propulsion {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var motors: [Telemetry_Report.Vehicle.System.Propulsion.Motor] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        struct Motor {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// The numeric identifier for the motor [0..n].
          var number: UInt32 {
            get {return _storage._number}
            set {_uniqueStorage()._number = newValue}
          }

          /// The voltage of the motor in volts [V].
          var voltage: Units_Volts {
            get {return _storage._voltage ?? Units_Volts()}
            set {_uniqueStorage()._voltage = newValue}
          }
          /// Returns true if `voltage` has been explicitly set.
          var hasVoltage: Bool {return _storage._voltage != nil}
          /// Clears the value of `voltage`. Subsequent reads from it will return its default value.
          mutating func clearVoltage() {_uniqueStorage()._voltage = nil}

          /// The current of the motor in Amps [A].
          var current: Units_Amperes {
            get {return _storage._current ?? Units_Amperes()}
            set {_uniqueStorage()._current = newValue}
          }
          /// Returns true if `current` has been explicitly set.
          var hasCurrent: Bool {return _storage._current != nil}
          /// Clears the value of `current`. Subsequent reads from it will return its default value.
          mutating func clearCurrent() {_uniqueStorage()._current = nil}

          /// The temperature of the motor in degrees[ºC].
          var temperature: Units_Celsius {
            get {return _storage._temperature ?? Units_Celsius()}
            set {_uniqueStorage()._temperature = newValue}
          }
          /// Returns true if `temperature` has been explicitly set.
          var hasTemperature: Bool {return _storage._temperature != nil}
          /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
          mutating func clearTemperature() {_uniqueStorage()._temperature = nil}

          /// The revolutions per minute (rpm) of the motor.
          var rpm: Units_RPM {
            get {return _storage._rpm ?? Units_RPM()}
            set {_uniqueStorage()._rpm = newValue}
          }
          /// Returns true if `rpm` has been explicitly set.
          var hasRpm: Bool {return _storage._rpm != nil}
          /// Clears the value of `rpm`. Subsequent reads from it will return its default value.
          mutating func clearRpm() {_uniqueStorage()._rpm = nil}

          var unknownFields = SwiftProtobuf.UnknownStorage()

          init() {}

          fileprivate var _storage = _StorageClass.defaultInstance
        }

        init() {}
      }

      /// Communication models the communication system.
      struct Communication {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var links: [Telemetry_Report.Vehicle.System.Communication.Link] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Band marks a radio frequency band.
        enum Band: SwiftProtobuf.Enum {
          typealias RawValue = Int
          case unknown // = 0

          /// 2.4 GHz
          case band2Dot4Ghz // = 1

          /// 5.0 GHz
          case band5Dot0Ghz // = 2
          case UNRECOGNIZED(Int)

          init() {
            self = .unknown
          }

          init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .unknown
            case 1: self = .band2Dot4Ghz
            case 2: self = .band5Dot0Ghz
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          var rawValue: Int {
            switch self {
            case .unknown: return 0
            case .band2Dot4Ghz: return 1
            case .band5Dot0Ghz: return 2
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        /// Link models a communication link.
        struct Link {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          var details: OneOf_Details? {
            get {return _storage._details}
            set {_uniqueStorage()._details = newValue}
          }

          /// A GPS communication link.
          var gps: Telemetry_Report.Vehicle.System.Communication.Link.GPS {
            get {
              if case .gps(let v)? = _storage._details {return v}
              return Telemetry_Report.Vehicle.System.Communication.Link.GPS()
            }
            set {_uniqueStorage()._details = .gps(newValue)}
          }

          /// A Wi-Fi communication link.
          var wifi: Telemetry_Report.Vehicle.System.Communication.Link.WiFi {
            get {
              if case .wifi(let v)? = _storage._details {return v}
              return Telemetry_Report.Vehicle.System.Communication.Link.WiFi()
            }
            set {_uniqueStorage()._details = .wifi(newValue)}
          }

          /// A cellular communication link.
          var cellular: Telemetry_Report.Vehicle.System.Communication.Link.Cellular {
            get {
              if case .cellular(let v)? = _storage._details {return v}
              return Telemetry_Report.Vehicle.System.Communication.Link.Cellular()
            }
            set {_uniqueStorage()._details = .cellular(newValue)}
          }

          var unknownFields = SwiftProtobuf.UnknownStorage()

          enum OneOf_Details: Equatable {
            /// A GPS communication link.
            case gps(Telemetry_Report.Vehicle.System.Communication.Link.GPS)
            /// A Wi-Fi communication link.
            case wifi(Telemetry_Report.Vehicle.System.Communication.Link.WiFi)
            /// A cellular communication link.
            case cellular(Telemetry_Report.Vehicle.System.Communication.Link.Cellular)

          #if !swift(>=4.1)
            static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link.OneOf_Details, rhs: Telemetry_Report.Vehicle.System.Communication.Link.OneOf_Details) -> Bool {
              switch (lhs, rhs) {
              case (.gps(let l), .gps(let r)): return l == r
              case (.wifi(let l), .wifi(let r)): return l == r
              case (.cellular(let l), .cellular(let r)): return l == r
              default: return false
              }
            }
          #endif
          }

          /// WiFi models a Wi-Fi link.
          struct WiFi {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            /// The numeric identifier for the link [0..n].
            var number: UInt32 = 0

            /// The network name.
            var ssid: String = String()

            /// The frequency channel.
            var channel: UInt32 = 0

            /// The frequency band.
            var band: Telemetry_Report.Vehicle.System.Communication.Band = .unknown

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          /// GPS models a Global Positioning System link.
          struct GPS {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            /// The numeric identifier for the link [0..n].
            var number: UInt32 = 0

            /// Number of satellites in range.
            var satellites: UInt32 = 0

            /// Horizontal dilution of precision.
            var hdop: UInt32 = 0

            /// Vertical dilution of precision.
            var vdop: UInt32 = 0

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}
          }

          /// Cellular models a cellular telecom link.
          struct Cellular {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            /// The numeric identifier for the link [0..n].
            var number: UInt32 {
              get {return _storage._number}
              set {_uniqueStorage()._number = newValue}
            }

            /// The signal level for the link in decibels [dB].
            var signal: Units_Decibels {
              get {return _storage._signal ?? Units_Decibels()}
              set {_uniqueStorage()._signal = newValue}
            }
            /// Returns true if `signal` has been explicitly set.
            var hasSignal: Bool {return _storage._signal != nil}
            /// Clears the value of `signal`. Subsequent reads from it will return its default value.
            mutating func clearSignal() {_uniqueStorage()._signal = nil}

            var unknownFields = SwiftProtobuf.UnknownStorage()

            init() {}

            fileprivate var _storage = _StorageClass.defaultInstance
          }

          init() {}

          fileprivate var _storage = _StorageClass.defaultInstance
        }

        init() {}
      }

      /// Safety models the safety system.
      struct Safety {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Indicates the link to the aircraft has been lost.
        var lossOfLink: SwiftProtobuf.Google_Protobuf_BoolValue {
          get {return _storage._lossOfLink ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
          set {_uniqueStorage()._lossOfLink = newValue}
        }
        /// Returns true if `lossOfLink` has been explicitly set.
        var hasLossOfLink: Bool {return _storage._lossOfLink != nil}
        /// Clears the value of `lossOfLink`. Subsequent reads from it will return its default value.
        mutating func clearLossOfLink() {_uniqueStorage()._lossOfLink = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    /// Endurance models the run endurance of a vehicle.
    struct Endurance {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The estimated remaining endurance expressed as duration.
      var duration: SwiftProtobuf.Google_Protobuf_Duration {
        get {return _storage._duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
        set {_uniqueStorage()._duration = newValue}
      }
      /// Returns true if `duration` has been explicitly set.
      var hasDuration: Bool {return _storage._duration != nil}
      /// Clears the value of `duration`. Subsequent reads from it will return its default value.
      mutating func clearDuration() {_uniqueStorage()._duration = nil}

      /// The estimated remaining endurance expressed as distance.
      var distance: Units_Meters {
        get {return _storage._distance ?? Units_Meters()}
        set {_uniqueStorage()._distance = newValue}
      }
      /// Returns true if `distance` has been explicitly set.
      var hasDistance: Bool {return _storage._distance != nil}
      /// Clears the value of `distance`. Subsequent reads from it will return its default value.
      mutating func clearDistance() {_uniqueStorage()._distance = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Atmosphere models an atmospheric report
  struct Atmosphere {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The position of the report.
    var position: Measurements_Position {
      get {return _storage._position ?? Measurements_Position()}
      set {_uniqueStorage()._position = newValue}
    }
    /// Returns true if `position` has been explicitly set.
    var hasPosition: Bool {return _storage._position != nil}
    /// Clears the value of `position`. Subsequent reads from it will return its default value.
    mutating func clearPosition() {_uniqueStorage()._position = nil}

    /// An atmospheric pressure measurement [Pa].
    var pressure: Units_Pascals {
      get {return _storage._pressure ?? Units_Pascals()}
      set {_uniqueStorage()._pressure = newValue}
    }
    /// Returns true if `pressure` has been explicitly set.
    var hasPressure: Bool {return _storage._pressure != nil}
    /// Clears the value of `pressure`. Subsequent reads from it will return its default value.
    mutating func clearPressure() {_uniqueStorage()._pressure = nil}

    /// A temperature measurement [ºC].
    var temperature: Units_Celsius {
      get {return _storage._temperature ?? Units_Celsius()}
      set {_uniqueStorage()._temperature = newValue}
    }
    /// Returns true if `temperature` has been explicitly set.
    var hasTemperature: Bool {return _storage._temperature != nil}
    /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
    mutating func clearTemperature() {_uniqueStorage()._temperature = nil}

    /// A wind measurement [m/s].
    var wind: Units_MetersPerSecond {
      get {return _storage._wind ?? Units_MetersPerSecond()}
      set {_uniqueStorage()._wind = newValue}
    }
    /// Returns true if `wind` has been explicitly set.
    var hasWind: Bool {return _storage._wind != nil}
    /// Clears the value of `wind`. Subsequent reads from it will return its default value.
    mutating func clearWind() {_uniqueStorage()._wind = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "telemetry"

extension Telemetry_Report: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Report"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "observed"),
    2: .same(proto: "identities"),
    3: .same(proto: "spatial"),
    4: .same(proto: "vehicle"),
    5: .same(proto: "atmosphere"),
  ]

  fileprivate class _StorageClass {
    var _observed: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _identities: [Tracking_Identity] = []
    var _details: Telemetry_Report.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _observed = source._observed
      _identities = source._identities
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._observed)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._identities)
        case 3:
          var v: Telemetry_Report.Spatial?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .spatial(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .spatial(v)}
        case 4:
          var v: Telemetry_Report.Vehicle?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .vehicle(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .vehicle(v)}
        case 5:
          var v: Telemetry_Report.Atmosphere?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .atmosphere(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .atmosphere(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._observed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._identities.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._identities, fieldNumber: 2)
      }
      switch _storage._details {
      case .spatial(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .vehicle(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .atmosphere(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report, rhs: Telemetry_Report) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._observed != rhs_storage._observed {return false}
        if _storage._identities != rhs_storage._identities {return false}
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Spatial: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.protoMessageName + ".Spatial"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "velocity"),
    3: .same(proto: "orientation"),
    4: .same(proto: "acceleration"),
  ]

  fileprivate class _StorageClass {
    var _position: Measurements_Position? = nil
    var _velocity: Measurements_Velocity? = nil
    var _orientation: Measurements_Orientation? = nil
    var _acceleration: Measurements_Acceleration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _position = source._position
      _velocity = source._velocity
      _orientation = source._orientation
      _acceleration = source._acceleration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._position)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._velocity)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._orientation)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._acceleration)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._velocity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._orientation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._acceleration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Spatial, rhs: Telemetry_Report.Spatial) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._position != rhs_storage._position {return false}
        if _storage._velocity != rhs_storage._velocity {return false}
        if _storage._orientation != rhs_storage._orientation {return false}
        if _storage._acceleration != rhs_storage._acceleration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.protoMessageName + ".Vehicle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "systems"),
    2: .same(proto: "endurance"),
    3: .same(proto: "airborne"),
  ]

  fileprivate class _StorageClass {
    var _systems: [Telemetry_Report.Vehicle.System] = []
    var _endurance: Telemetry_Report.Vehicle.Endurance? = nil
    var _airborne: SwiftProtobuf.Google_Protobuf_BoolValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _systems = source._systems
      _endurance = source._endurance
      _airborne = source._airborne
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._systems)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._endurance)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._airborne)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._systems.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._systems, fieldNumber: 1)
      }
      if let v = _storage._endurance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._airborne {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle, rhs: Telemetry_Report.Vehicle) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._systems != rhs_storage._systems {return false}
        if _storage._endurance != rhs_storage._endurance {return false}
        if _storage._airborne != rhs_storage._airborne {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.protoMessageName + ".System"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "electrical"),
    2: .same(proto: "communication"),
    3: .same(proto: "propulsion"),
    4: .same(proto: "safety"),
  ]

  fileprivate class _StorageClass {
    var _details: Telemetry_Report.Vehicle.System.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Telemetry_Report.Vehicle.System.Electrical?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .electrical(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .electrical(v)}
        case 2:
          var v: Telemetry_Report.Vehicle.System.Communication?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .communication(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .communication(v)}
        case 3:
          var v: Telemetry_Report.Vehicle.System.Propulsion?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .propulsion(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .propulsion(v)}
        case 4:
          var v: Telemetry_Report.Vehicle.System.Safety?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .safety(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .safety(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .electrical(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .communication(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .propulsion(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .safety(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System, rhs: Telemetry_Report.Vehicle.System) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Electrical: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.protoMessageName + ".Electrical"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buses"),
    2: .same(proto: "batteries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.buses)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.batteries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buses, fieldNumber: 1)
    }
    if !self.batteries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.batteries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Electrical, rhs: Telemetry_Report.Vehicle.System.Electrical) -> Bool {
    if lhs.buses != rhs.buses {return false}
    if lhs.batteries != rhs.batteries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Electrical.Bus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.Electrical.protoMessageName + ".Bus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "voltage"),
    3: .same(proto: "current"),
  ]

  fileprivate class _StorageClass {
    var _number: UInt32 = 0
    var _voltage: Units_Volts? = nil
    var _current: Units_Amperes? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _number = source._number
      _voltage = source._voltage
      _current = source._current
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._number)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._voltage)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._current)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._number != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._number, fieldNumber: 1)
      }
      if let v = _storage._voltage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._current {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Electrical.Bus, rhs: Telemetry_Report.Vehicle.System.Electrical.Bus) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._number != rhs_storage._number {return false}
        if _storage._voltage != rhs_storage._voltage {return false}
        if _storage._current != rhs_storage._current {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Electrical.Battery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.Electrical.protoMessageName + ".Battery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "temperature"),
    3: .same(proto: "voltage"),
    4: .same(proto: "current"),
    5: .same(proto: "capacity"),
    6: .same(proto: "charge"),
  ]

  fileprivate class _StorageClass {
    var _number: UInt32 = 0
    var _temperature: Units_Celsius? = nil
    var _voltage: Units_Volts? = nil
    var _current: Units_Amperes? = nil
    var _capacity: Units_AmpereHours? = nil
    var _charge: Units_Percent? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _number = source._number
      _temperature = source._temperature
      _voltage = source._voltage
      _current = source._current
      _capacity = source._capacity
      _charge = source._charge
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._number)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._temperature)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._voltage)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._current)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._capacity)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._charge)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._number != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._number, fieldNumber: 1)
      }
      if let v = _storage._temperature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._voltage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._current {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._capacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._charge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Electrical.Battery, rhs: Telemetry_Report.Vehicle.System.Electrical.Battery) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._number != rhs_storage._number {return false}
        if _storage._temperature != rhs_storage._temperature {return false}
        if _storage._voltage != rhs_storage._voltage {return false}
        if _storage._current != rhs_storage._current {return false}
        if _storage._capacity != rhs_storage._capacity {return false}
        if _storage._charge != rhs_storage._charge {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Propulsion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.protoMessageName + ".Propulsion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "motors"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.motors)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.motors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.motors, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Propulsion, rhs: Telemetry_Report.Vehicle.System.Propulsion) -> Bool {
    if lhs.motors != rhs.motors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Propulsion.Motor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.Propulsion.protoMessageName + ".Motor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "voltage"),
    3: .same(proto: "current"),
    4: .same(proto: "temperature"),
    5: .same(proto: "rpm"),
  ]

  fileprivate class _StorageClass {
    var _number: UInt32 = 0
    var _voltage: Units_Volts? = nil
    var _current: Units_Amperes? = nil
    var _temperature: Units_Celsius? = nil
    var _rpm: Units_RPM? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _number = source._number
      _voltage = source._voltage
      _current = source._current
      _temperature = source._temperature
      _rpm = source._rpm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._number)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._voltage)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._current)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._temperature)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._rpm)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._number != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._number, fieldNumber: 1)
      }
      if let v = _storage._voltage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._current {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._temperature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._rpm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Propulsion.Motor, rhs: Telemetry_Report.Vehicle.System.Propulsion.Motor) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._number != rhs_storage._number {return false}
        if _storage._voltage != rhs_storage._voltage {return false}
        if _storage._current != rhs_storage._current {return false}
        if _storage._temperature != rhs_storage._temperature {return false}
        if _storage._rpm != rhs_storage._rpm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.protoMessageName + ".Communication"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "links"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.links)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.links.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.links, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Communication, rhs: Telemetry_Report.Vehicle.System.Communication) -> Bool {
    if lhs.links != rhs.links {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication.Band: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BAND_UNKNOWN"),
    1: .same(proto: "BAND_2DOT4GHZ"),
    2: .same(proto: "BAND_5DOT0GHZ"),
  ]
}

extension Telemetry_Report.Vehicle.System.Communication.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.Communication.protoMessageName + ".Link"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gps"),
    2: .same(proto: "wifi"),
    3: .same(proto: "cellular"),
  ]

  fileprivate class _StorageClass {
    var _details: Telemetry_Report.Vehicle.System.Communication.Link.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Telemetry_Report.Vehicle.System.Communication.Link.GPS?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .gps(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .gps(v)}
        case 2:
          var v: Telemetry_Report.Vehicle.System.Communication.Link.WiFi?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .wifi(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .wifi(v)}
        case 3:
          var v: Telemetry_Report.Vehicle.System.Communication.Link.Cellular?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .cellular(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .cellular(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._details {
      case .gps(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .wifi(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .cellular(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link, rhs: Telemetry_Report.Vehicle.System.Communication.Link) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication.Link.WiFi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.Communication.Link.protoMessageName + ".WiFi"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "ssid"),
    3: .same(proto: "channel"),
    4: .same(proto: "band"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.number)
      case 2: try decoder.decodeSingularStringField(value: &self.ssid)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.channel)
      case 4: try decoder.decodeSingularEnumField(value: &self.band)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 1)
    }
    if !self.ssid.isEmpty {
      try visitor.visitSingularStringField(value: self.ssid, fieldNumber: 2)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 3)
    }
    if self.band != .unknown {
      try visitor.visitSingularEnumField(value: self.band, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link.WiFi, rhs: Telemetry_Report.Vehicle.System.Communication.Link.WiFi) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs.ssid != rhs.ssid {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.band != rhs.band {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication.Link.GPS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.Communication.Link.protoMessageName + ".GPS"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "satellites"),
    3: .same(proto: "hdop"),
    4: .same(proto: "vdop"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.number)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.satellites)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.hdop)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.vdop)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 1)
    }
    if self.satellites != 0 {
      try visitor.visitSingularUInt32Field(value: self.satellites, fieldNumber: 2)
    }
    if self.hdop != 0 {
      try visitor.visitSingularUInt32Field(value: self.hdop, fieldNumber: 3)
    }
    if self.vdop != 0 {
      try visitor.visitSingularUInt32Field(value: self.vdop, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link.GPS, rhs: Telemetry_Report.Vehicle.System.Communication.Link.GPS) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs.satellites != rhs.satellites {return false}
    if lhs.hdop != rhs.hdop {return false}
    if lhs.vdop != rhs.vdop {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication.Link.Cellular: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.Communication.Link.protoMessageName + ".Cellular"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "signal"),
  ]

  fileprivate class _StorageClass {
    var _number: UInt32 = 0
    var _signal: Units_Decibels? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _number = source._number
      _signal = source._signal
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._number)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._signal)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._number != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._number, fieldNumber: 1)
      }
      if let v = _storage._signal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link.Cellular, rhs: Telemetry_Report.Vehicle.System.Communication.Link.Cellular) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._number != rhs_storage._number {return false}
        if _storage._signal != rhs_storage._signal {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Safety: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.System.protoMessageName + ".Safety"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "loss_of_link"),
  ]

  fileprivate class _StorageClass {
    var _lossOfLink: SwiftProtobuf.Google_Protobuf_BoolValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _lossOfLink = source._lossOfLink
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._lossOfLink)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._lossOfLink {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.System.Safety, rhs: Telemetry_Report.Vehicle.System.Safety) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._lossOfLink != rhs_storage._lossOfLink {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.Endurance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.Vehicle.protoMessageName + ".Endurance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "duration"),
    2: .same(proto: "distance"),
  ]

  fileprivate class _StorageClass {
    var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _distance: Units_Meters? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _duration = source._duration
      _distance = source._distance
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._duration)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._distance)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._duration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._distance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Vehicle.Endurance, rhs: Telemetry_Report.Vehicle.Endurance) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._distance != rhs_storage._distance {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Atmosphere: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Telemetry_Report.protoMessageName + ".Atmosphere"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "pressure"),
    3: .same(proto: "temperature"),
    4: .same(proto: "wind"),
  ]

  fileprivate class _StorageClass {
    var _position: Measurements_Position? = nil
    var _pressure: Units_Pascals? = nil
    var _temperature: Units_Celsius? = nil
    var _wind: Units_MetersPerSecond? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _position = source._position
      _pressure = source._pressure
      _temperature = source._temperature
      _wind = source._wind
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._position)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pressure)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._temperature)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._wind)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._pressure {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._temperature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._wind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Telemetry_Report.Atmosphere, rhs: Telemetry_Report.Atmosphere) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._position != rhs_storage._position {return false}
        if _storage._pressure != rhs_storage._pressure {return false}
        if _storage._temperature != rhs_storage._temperature {return false}
        if _storage._wind != rhs_storage._wind {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
