//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: telemetry/archive.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Telemetry_ArchiveClient, then call methods of this protocol to make API calls.
internal protocol Telemetry_ArchiveClientProtocol {
  func queryOperationReports(_ request: Telemetry_OperationQuery, callOptions: CallOptions?, handler: @escaping (Telemetry_Report) -> Void) -> ServerStreamingCall<Telemetry_OperationQuery, Telemetry_Report>
}

internal final class Telemetry_ArchiveClient: GRPCClient, Telemetry_ArchiveClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the telemetry.Archive service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Server streaming call to QueryOperationReports
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryOperationReports.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func queryOperationReports(_ request: Telemetry_OperationQuery, callOptions: CallOptions? = nil, handler: @escaping (Telemetry_Report) -> Void) -> ServerStreamingCall<Telemetry_OperationQuery, Telemetry_Report> {
    return self.makeServerStreamingCall(path: "/telemetry.Archive/QueryOperationReports",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Telemetry_ArchiveProvider: CallHandlerProvider {
  func queryOperationReports(request: Telemetry_OperationQuery, context: StreamingResponseCallContext<Telemetry_Report>) -> EventLoopFuture<GRPCStatus>
}

extension Telemetry_ArchiveProvider {
  internal var serviceName: String { return "telemetry.Archive" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "QueryOperationReports":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.queryOperationReports(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload` for request and response messages
extension Telemetry_OperationQuery: GRPCProtobufPayload {}
extension Telemetry_Report: GRPCProtobufPayload {}

