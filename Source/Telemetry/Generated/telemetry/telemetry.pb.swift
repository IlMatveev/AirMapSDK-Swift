// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry/telemetry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Update wraps types used in the exchange of telemetry updates with a collector.
public struct Telemetry_Update {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// FromProvider wraps messages being sent from a provider to a collector.
  public struct FromProvider {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var details: Telemetry_Update.FromProvider.OneOf_Details? = nil

    /// Collector operational status.
    public var status: System_Status {
      get {
        if case .status(let v)? = details {return v}
        return System_Status()
      }
      set {details = .status(newValue)}
    }

    /// A report from a provider
    public var report: Telemetry_Report {
      get {
        if case .report(let v)? = details {return v}
        return Telemetry_Report()
      }
      set {details = .report(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Details: Equatable {
      /// Collector operational status.
      case status(System_Status)
      /// A report from a provider
      case report(Telemetry_Report)

    #if !swift(>=4.1)
      public static func ==(lhs: Telemetry_Update.FromProvider.OneOf_Details, rhs: Telemetry_Update.FromProvider.OneOf_Details) -> Bool {
        switch (lhs, rhs) {
        case (.status(let l), .status(let r)): return l == r
        case (.report(let l), .report(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  /// ToProvider wraps messages being sent from a collector back to a provider.
  public struct ToProvider {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var details: Telemetry_Update.ToProvider.OneOf_Details? = nil

    /// Collector operational status.
    public var status: System_Status {
      get {
        if case .status(let v)? = details {return v}
        return System_Status()
      }
      set {details = .status(newValue)}
    }

    /// Acknowledgement of received updates.
    public var ack: System_Ack {
      get {
        if case .ack(let v)? = details {return v}
        return System_Ack()
      }
      set {details = .ack(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Details: Equatable {
      /// Collector operational status.
      case status(System_Status)
      /// Acknowledgement of received updates.
      case ack(System_Ack)

    #if !swift(>=4.1)
      public static func ==(lhs: Telemetry_Update.ToProvider.OneOf_Details, rhs: Telemetry_Update.ToProvider.OneOf_Details) -> Bool {
        switch (lhs, rhs) {
        case (.status(let l), .status(let r)): return l == r
        case (.ack(let l), .ack(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "telemetry"

extension Telemetry_Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Update"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Update, rhs: Telemetry_Update) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Update.FromProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Update.protoMessageName + ".FromProvider"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "report"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: System_Status?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .status(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .status(v)}
      case 2:
        var v: Telemetry_Report?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .report(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .report(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.details {
    case .status(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .report(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Update.FromProvider, rhs: Telemetry_Update.FromProvider) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Update.ToProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Update.protoMessageName + ".ToProvider"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "ack"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: System_Status?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .status(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .status(v)}
      case 2:
        var v: System_Ack?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .ack(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .ack(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.details {
    case .status(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .ack(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Update.ToProvider, rhs: Telemetry_Update.ToProvider) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
