// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry/report.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Report models a telemetry report at a given point in time.
public struct Telemetry_Report {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Time the report was observed; time of applicability.
  public var observed: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _observed ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_observed = newValue}
  }
  /// Returns true if `observed` has been explicitly set.
  public var hasObserved: Bool {return self._observed != nil}
  /// Clears the value of `observed`. Subsequent reads from it will return its default value.
  public mutating func clearObserved() {self._observed = nil}

  /// Identities associated with the report.
  public var identities: [Tracking_Identity] = []

  /// details is a discriminated union of all report types.
  public var details: Telemetry_Report.OneOf_Details? = nil

  public var spatial: Telemetry_Report.Spatial {
    get {
      if case .spatial(let v)? = details {return v}
      return Telemetry_Report.Spatial()
    }
    set {details = .spatial(newValue)}
  }

  public var vehicle: Telemetry_Report.Vehicle {
    get {
      if case .vehicle(let v)? = details {return v}
      return Telemetry_Report.Vehicle()
    }
    set {details = .vehicle(newValue)}
  }

  public var atmosphere: Telemetry_Report.Atmosphere {
    get {
      if case .atmosphere(let v)? = details {return v}
      return Telemetry_Report.Atmosphere()
    }
    set {details = .atmosphere(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// details is a discriminated union of all report types.
  public enum OneOf_Details: Equatable {
    case spatial(Telemetry_Report.Spatial)
    case vehicle(Telemetry_Report.Vehicle)
    case atmosphere(Telemetry_Report.Atmosphere)

  #if !swift(>=4.1)
    public static func ==(lhs: Telemetry_Report.OneOf_Details, rhs: Telemetry_Report.OneOf_Details) -> Bool {
      switch (lhs, rhs) {
      case (.spatial(let l), .spatial(let r)): return l == r
      case (.vehicle(let l), .vehicle(let r)): return l == r
      case (.atmosphere(let l), .atmosphere(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Spatial models a spatial report
  public struct Spatial {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A positional measurement. Required.
    public var position: Measurements_Position {
      get {return _position ?? Measurements_Position()}
      set {_position = newValue}
    }
    /// Returns true if `position` has been explicitly set.
    public var hasPosition: Bool {return self._position != nil}
    /// Clears the value of `position`. Subsequent reads from it will return its default value.
    public mutating func clearPosition() {self._position = nil}

    /// A velocity measurement.
    public var velocity: Measurements_Velocity {
      get {return _velocity ?? Measurements_Velocity()}
      set {_velocity = newValue}
    }
    /// Returns true if `velocity` has been explicitly set.
    public var hasVelocity: Bool {return self._velocity != nil}
    /// Clears the value of `velocity`. Subsequent reads from it will return its default value.
    public mutating func clearVelocity() {self._velocity = nil}

    /// An orientation/attitude measurement.
    public var orientation: Measurements_Orientation {
      get {return _orientation ?? Measurements_Orientation()}
      set {_orientation = newValue}
    }
    /// Returns true if `orientation` has been explicitly set.
    public var hasOrientation: Bool {return self._orientation != nil}
    /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
    public mutating func clearOrientation() {self._orientation = nil}

    /// An acceleration measurement.
    public var acceleration: Measurements_Acceleration {
      get {return _acceleration ?? Measurements_Acceleration()}
      set {_acceleration = newValue}
    }
    /// Returns true if `acceleration` has been explicitly set.
    public var hasAcceleration: Bool {return self._acceleration != nil}
    /// Clears the value of `acceleration`. Subsequent reads from it will return its default value.
    public mutating func clearAcceleration() {self._acceleration = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _position: Measurements_Position? = nil
    fileprivate var _velocity: Measurements_Velocity? = nil
    fileprivate var _orientation: Measurements_Orientation? = nil
    fileprivate var _acceleration: Measurements_Acceleration? = nil
  }

  /// Vehicle models a vehicle report
  public struct Vehicle {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Detailed reports for vehicle systems.
    public var systems: [Telemetry_Report.Vehicle.System] = []

    /// The remaining endurance.
    public var endurance: Telemetry_Report.Vehicle.Endurance {
      get {return _endurance ?? Telemetry_Report.Vehicle.Endurance()}
      set {_endurance = newValue}
    }
    /// Returns true if `endurance` has been explicitly set.
    public var hasEndurance: Bool {return self._endurance != nil}
    /// Clears the value of `endurance`. Subsequent reads from it will return its default value.
    public mutating func clearEndurance() {self._endurance = nil}

    /// A flag to indicate the vehicle is airborne.
    public var airborne: SwiftProtobuf.Google_Protobuf_BoolValue {
      get {return _airborne ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
      set {_airborne = newValue}
    }
    /// Returns true if `airborne` has been explicitly set.
    public var hasAirborne: Bool {return self._airborne != nil}
    /// Clears the value of `airborne`. Subsequent reads from it will return its default value.
    public mutating func clearAirborne() {self._airborne = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// System models a discrete vehicle system.
    public struct System {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var details: Telemetry_Report.Vehicle.System.OneOf_Details? = nil

      public var electrical: Telemetry_Report.Vehicle.System.Electrical {
        get {
          if case .electrical(let v)? = details {return v}
          return Telemetry_Report.Vehicle.System.Electrical()
        }
        set {details = .electrical(newValue)}
      }

      public var communication: Telemetry_Report.Vehicle.System.Communication {
        get {
          if case .communication(let v)? = details {return v}
          return Telemetry_Report.Vehicle.System.Communication()
        }
        set {details = .communication(newValue)}
      }

      public var propulsion: Telemetry_Report.Vehicle.System.Propulsion {
        get {
          if case .propulsion(let v)? = details {return v}
          return Telemetry_Report.Vehicle.System.Propulsion()
        }
        set {details = .propulsion(newValue)}
      }

      public var safety: Telemetry_Report.Vehicle.System.Safety {
        get {
          if case .safety(let v)? = details {return v}
          return Telemetry_Report.Vehicle.System.Safety()
        }
        set {details = .safety(newValue)}
      }

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public enum OneOf_Details: Equatable {
        case electrical(Telemetry_Report.Vehicle.System.Electrical)
        case communication(Telemetry_Report.Vehicle.System.Communication)
        case propulsion(Telemetry_Report.Vehicle.System.Propulsion)
        case safety(Telemetry_Report.Vehicle.System.Safety)

      #if !swift(>=4.1)
        public static func ==(lhs: Telemetry_Report.Vehicle.System.OneOf_Details, rhs: Telemetry_Report.Vehicle.System.OneOf_Details) -> Bool {
          switch (lhs, rhs) {
          case (.electrical(let l), .electrical(let r)): return l == r
          case (.communication(let l), .communication(let r)): return l == r
          case (.propulsion(let l), .propulsion(let r)): return l == r
          case (.safety(let l), .safety(let r)): return l == r
          default: return false
          }
        }
      #endif
      }

      /// Electrical models the electrical system.
      public struct Electrical {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var buses: [Telemetry_Report.Vehicle.System.Electrical.Bus] = []

        public var batteries: [Telemetry_Report.Vehicle.System.Electrical.Battery] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Bus models an electrical bus.
        public struct Bus {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// The numeric identifier for the bus [0..n].
          public var number: UInt32 = 0

          /// The present voltage level in volts [V].
          public var voltage: Units_Volts {
            get {return _voltage ?? Units_Volts()}
            set {_voltage = newValue}
          }
          /// Returns true if `voltage` has been explicitly set.
          public var hasVoltage: Bool {return self._voltage != nil}
          /// Clears the value of `voltage`. Subsequent reads from it will return its default value.
          public mutating func clearVoltage() {self._voltage = nil}

          /// The present load on the bus in amps. Positive values indicate a charge.
          public var current: Units_Amperes {
            get {return _current ?? Units_Amperes()}
            set {_current = newValue}
          }
          /// Returns true if `current` has been explicitly set.
          public var hasCurrent: Bool {return self._current != nil}
          /// Clears the value of `current`. Subsequent reads from it will return its default value.
          public mutating func clearCurrent() {self._current = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _voltage: Units_Volts? = nil
          fileprivate var _current: Units_Amperes? = nil
        }

        /// Battery models a battery.
        public struct Battery {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// The numeric identifier for the battery [0..n].
          public var number: UInt32 = 0

          /// Temperature of battery in degrees Celsius[ºC].
          public var temperature: Units_Celsius {
            get {return _temperature ?? Units_Celsius()}
            set {_temperature = newValue}
          }
          /// Returns true if `temperature` has been explicitly set.
          public var hasTemperature: Bool {return self._temperature != nil}
          /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
          public mutating func clearTemperature() {self._temperature = nil}

          /// The present voltage of the battery in volts[V].
          public var voltage: Units_Volts {
            get {return _voltage ?? Units_Volts()}
            set {_voltage = newValue}
          }
          /// Returns true if `voltage` has been explicitly set.
          public var hasVoltage: Bool {return self._voltage != nil}
          /// Clears the value of `voltage`. Subsequent reads from it will return its default value.
          public mutating func clearVoltage() {self._voltage = nil}

          /// The present load on the battery in amps. Positive values indicate a charge.
          public var current: Units_Amperes {
            get {return _current ?? Units_Amperes()}
            set {_current = newValue}
          }
          /// Returns true if `current` has been explicitly set.
          public var hasCurrent: Bool {return self._current != nil}
          /// Clears the value of `current`. Subsequent reads from it will return its default value.
          public mutating func clearCurrent() {self._current = nil}

          /// Total amount of battery capacity in ampere-hours[Ah].
          public var capacity: Units_AmpereHours {
            get {return _capacity ?? Units_AmpereHours()}
            set {_capacity = newValue}
          }
          /// Returns true if `capacity` has been explicitly set.
          public var hasCapacity: Bool {return self._capacity != nil}
          /// Clears the value of `capacity`. Subsequent reads from it will return its default value.
          public mutating func clearCapacity() {self._capacity = nil}

          /// The remaining battery capacity as a % of capacity.
          public var charge: Units_Percent {
            get {return _charge ?? Units_Percent()}
            set {_charge = newValue}
          }
          /// Returns true if `charge` has been explicitly set.
          public var hasCharge: Bool {return self._charge != nil}
          /// Clears the value of `charge`. Subsequent reads from it will return its default value.
          public mutating func clearCharge() {self._charge = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _temperature: Units_Celsius? = nil
          fileprivate var _voltage: Units_Volts? = nil
          fileprivate var _current: Units_Amperes? = nil
          fileprivate var _capacity: Units_AmpereHours? = nil
          fileprivate var _charge: Units_Percent? = nil
        }

        public init() {}
      }

      /// Propulsion models the propulsion system.
      public struct Propulsion {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var motors: [Telemetry_Report.Vehicle.System.Propulsion.Motor] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public struct Motor {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          /// The numeric identifier for the motor [0..n].
          public var number: UInt32 = 0

          /// The voltage of the motor in volts [V].
          public var voltage: Units_Volts {
            get {return _voltage ?? Units_Volts()}
            set {_voltage = newValue}
          }
          /// Returns true if `voltage` has been explicitly set.
          public var hasVoltage: Bool {return self._voltage != nil}
          /// Clears the value of `voltage`. Subsequent reads from it will return its default value.
          public mutating func clearVoltage() {self._voltage = nil}

          /// The current of the motor in Amps [A].
          public var current: Units_Amperes {
            get {return _current ?? Units_Amperes()}
            set {_current = newValue}
          }
          /// Returns true if `current` has been explicitly set.
          public var hasCurrent: Bool {return self._current != nil}
          /// Clears the value of `current`. Subsequent reads from it will return its default value.
          public mutating func clearCurrent() {self._current = nil}

          /// The temperature of the motor in degrees[ºC].
          public var temperature: Units_Celsius {
            get {return _temperature ?? Units_Celsius()}
            set {_temperature = newValue}
          }
          /// Returns true if `temperature` has been explicitly set.
          public var hasTemperature: Bool {return self._temperature != nil}
          /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
          public mutating func clearTemperature() {self._temperature = nil}

          /// The revolutions per minute (rpm) of the motor.
          public var rpm: Units_RPM {
            get {return _rpm ?? Units_RPM()}
            set {_rpm = newValue}
          }
          /// Returns true if `rpm` has been explicitly set.
          public var hasRpm: Bool {return self._rpm != nil}
          /// Clears the value of `rpm`. Subsequent reads from it will return its default value.
          public mutating func clearRpm() {self._rpm = nil}

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public init() {}

          fileprivate var _voltage: Units_Volts? = nil
          fileprivate var _current: Units_Amperes? = nil
          fileprivate var _temperature: Units_Celsius? = nil
          fileprivate var _rpm: Units_RPM? = nil
        }

        public init() {}
      }

      /// Communication models the communication system.
      public struct Communication {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var links: [Telemetry_Report.Vehicle.System.Communication.Link] = []

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        /// Band marks a radio frequency band.
        public enum Band: SwiftProtobuf.Enum {
          public typealias RawValue = Int
          case unknown // = 0

          /// 2.4 GHz
          case band2Dot4Ghz // = 1

          /// 5.0 GHz
          case band5Dot0Ghz // = 2
          case UNRECOGNIZED(Int)

          public init() {
            self = .unknown
          }

          public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .unknown
            case 1: self = .band2Dot4Ghz
            case 2: self = .band5Dot0Ghz
            default: self = .UNRECOGNIZED(rawValue)
            }
          }

          public var rawValue: Int {
            switch self {
            case .unknown: return 0
            case .band2Dot4Ghz: return 1
            case .band5Dot0Ghz: return 2
            case .UNRECOGNIZED(let i): return i
            }
          }

        }

        /// Link models a communication link.
        public struct Link {
          // SwiftProtobuf.Message conformance is added in an extension below. See the
          // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
          // methods supported on all messages.

          public var details: Telemetry_Report.Vehicle.System.Communication.Link.OneOf_Details? = nil

          /// A GPS communication link.
          public var gps: Telemetry_Report.Vehicle.System.Communication.Link.GPS {
            get {
              if case .gps(let v)? = details {return v}
              return Telemetry_Report.Vehicle.System.Communication.Link.GPS()
            }
            set {details = .gps(newValue)}
          }

          /// A Wi-Fi communication link.
          public var wifi: Telemetry_Report.Vehicle.System.Communication.Link.WiFi {
            get {
              if case .wifi(let v)? = details {return v}
              return Telemetry_Report.Vehicle.System.Communication.Link.WiFi()
            }
            set {details = .wifi(newValue)}
          }

          /// A cellular communication link.
          public var cellular: Telemetry_Report.Vehicle.System.Communication.Link.Cellular {
            get {
              if case .cellular(let v)? = details {return v}
              return Telemetry_Report.Vehicle.System.Communication.Link.Cellular()
            }
            set {details = .cellular(newValue)}
          }

          public var unknownFields = SwiftProtobuf.UnknownStorage()

          public enum OneOf_Details: Equatable {
            /// A GPS communication link.
            case gps(Telemetry_Report.Vehicle.System.Communication.Link.GPS)
            /// A Wi-Fi communication link.
            case wifi(Telemetry_Report.Vehicle.System.Communication.Link.WiFi)
            /// A cellular communication link.
            case cellular(Telemetry_Report.Vehicle.System.Communication.Link.Cellular)

          #if !swift(>=4.1)
            public static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link.OneOf_Details, rhs: Telemetry_Report.Vehicle.System.Communication.Link.OneOf_Details) -> Bool {
              switch (lhs, rhs) {
              case (.gps(let l), .gps(let r)): return l == r
              case (.wifi(let l), .wifi(let r)): return l == r
              case (.cellular(let l), .cellular(let r)): return l == r
              default: return false
              }
            }
          #endif
          }

          /// WiFi models a Wi-Fi link.
          public struct WiFi {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            /// The numeric identifier for the link [0..n].
            public var number: UInt32 = 0

            /// The network name.
            public var ssid: String = String()

            /// The frequency channel.
            public var channel: UInt32 = 0

            /// The frequency band.
            public var band: Telemetry_Report.Vehicle.System.Communication.Band = .unknown

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          /// GPS models a Global Positioning System link.
          public struct GPS {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            /// The numeric identifier for the link [0..n].
            public var number: UInt32 = 0

            /// Number of satellites in range.
            public var satellites: UInt32 = 0

            /// Horizontal dilution of precision.
            public var hdop: UInt32 = 0

            /// Vertical dilution of precision.
            public var vdop: UInt32 = 0

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}
          }

          /// Cellular models a cellular telecom link.
          public struct Cellular {
            // SwiftProtobuf.Message conformance is added in an extension below. See the
            // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
            // methods supported on all messages.

            /// The numeric identifier for the link [0..n].
            public var number: UInt32 = 0

            /// The signal level for the link in decibels [dB].
            public var signal: Units_Decibels {
              get {return _signal ?? Units_Decibels()}
              set {_signal = newValue}
            }
            /// Returns true if `signal` has been explicitly set.
            public var hasSignal: Bool {return self._signal != nil}
            /// Clears the value of `signal`. Subsequent reads from it will return its default value.
            public mutating func clearSignal() {self._signal = nil}

            public var unknownFields = SwiftProtobuf.UnknownStorage()

            public init() {}

            fileprivate var _signal: Units_Decibels? = nil
          }

          public init() {}
        }

        public init() {}
      }

      /// Safety models the safety system.
      public struct Safety {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        /// Indicates the link to the aircraft has been lost.
        public var lossOfLink: SwiftProtobuf.Google_Protobuf_BoolValue {
          get {return _lossOfLink ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
          set {_lossOfLink = newValue}
        }
        /// Returns true if `lossOfLink` has been explicitly set.
        public var hasLossOfLink: Bool {return self._lossOfLink != nil}
        /// Clears the value of `lossOfLink`. Subsequent reads from it will return its default value.
        public mutating func clearLossOfLink() {self._lossOfLink = nil}

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}

        fileprivate var _lossOfLink: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
      }

      public init() {}
    }

    /// Endurance models the run endurance of a vehicle.
    public struct Endurance {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// The estimated remaining endurance expressed as duration.
      public var duration: SwiftProtobuf.Google_Protobuf_Duration {
        get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
        set {_duration = newValue}
      }
      /// Returns true if `duration` has been explicitly set.
      public var hasDuration: Bool {return self._duration != nil}
      /// Clears the value of `duration`. Subsequent reads from it will return its default value.
      public mutating func clearDuration() {self._duration = nil}

      /// The estimated remaining endurance expressed as distance.
      public var distance: Units_Meters {
        get {return _distance ?? Units_Meters()}
        set {_distance = newValue}
      }
      /// Returns true if `distance` has been explicitly set.
      public var hasDistance: Bool {return self._distance != nil}
      /// Clears the value of `distance`. Subsequent reads from it will return its default value.
      public mutating func clearDistance() {self._distance = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
      fileprivate var _distance: Units_Meters? = nil
    }

    public init() {}

    fileprivate var _endurance: Telemetry_Report.Vehicle.Endurance? = nil
    fileprivate var _airborne: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  }

  /// Atmosphere models an atmospheric report
  public struct Atmosphere {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The position of the report.
    public var position: Measurements_Position {
      get {return _position ?? Measurements_Position()}
      set {_position = newValue}
    }
    /// Returns true if `position` has been explicitly set.
    public var hasPosition: Bool {return self._position != nil}
    /// Clears the value of `position`. Subsequent reads from it will return its default value.
    public mutating func clearPosition() {self._position = nil}

    /// An atmospheric pressure measurement [Pa].
    public var pressure: Units_Pascals {
      get {return _pressure ?? Units_Pascals()}
      set {_pressure = newValue}
    }
    /// Returns true if `pressure` has been explicitly set.
    public var hasPressure: Bool {return self._pressure != nil}
    /// Clears the value of `pressure`. Subsequent reads from it will return its default value.
    public mutating func clearPressure() {self._pressure = nil}

    /// A temperature measurement [ºC].
    public var temperature: Units_Celsius {
      get {return _temperature ?? Units_Celsius()}
      set {_temperature = newValue}
    }
    /// Returns true if `temperature` has been explicitly set.
    public var hasTemperature: Bool {return self._temperature != nil}
    /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
    public mutating func clearTemperature() {self._temperature = nil}

    /// A wind measurement [m/s].
    public var wind: Units_MetersPerSecond {
      get {return _wind ?? Units_MetersPerSecond()}
      set {_wind = newValue}
    }
    /// Returns true if `wind` has been explicitly set.
    public var hasWind: Bool {return self._wind != nil}
    /// Clears the value of `wind`. Subsequent reads from it will return its default value.
    public mutating func clearWind() {self._wind = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _position: Measurements_Position? = nil
    fileprivate var _pressure: Units_Pascals? = nil
    fileprivate var _temperature: Units_Celsius? = nil
    fileprivate var _wind: Units_MetersPerSecond? = nil
  }

  public init() {}

  fileprivate var _observed: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=4.2)

extension Telemetry_Report.Vehicle.System.Communication.Band: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Telemetry_Report.Vehicle.System.Communication.Band] = [
    .unknown,
    .band2Dot4Ghz,
    .band5Dot0Ghz,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "telemetry"

extension Telemetry_Report: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Report"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "observed"),
    2: .same(proto: "identities"),
    3: .same(proto: "spatial"),
    4: .same(proto: "vehicle"),
    5: .same(proto: "atmosphere"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._observed)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.identities)
      case 3:
        var v: Telemetry_Report.Spatial?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .spatial(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .spatial(v)}
      case 4:
        var v: Telemetry_Report.Vehicle?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .vehicle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .vehicle(v)}
      case 5:
        var v: Telemetry_Report.Atmosphere?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .atmosphere(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .atmosphere(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._observed {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.identities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identities, fieldNumber: 2)
    }
    switch self.details {
    case .spatial(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .vehicle(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case .atmosphere(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report, rhs: Telemetry_Report) -> Bool {
    if lhs._observed != rhs._observed {return false}
    if lhs.identities != rhs.identities {return false}
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Spatial: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.protoMessageName + ".Spatial"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "velocity"),
    3: .same(proto: "orientation"),
    4: .same(proto: "acceleration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._position)
      case 2: try decoder.decodeSingularMessageField(value: &self._velocity)
      case 3: try decoder.decodeSingularMessageField(value: &self._orientation)
      case 4: try decoder.decodeSingularMessageField(value: &self._acceleration)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._velocity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._orientation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._acceleration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Spatial, rhs: Telemetry_Report.Spatial) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._velocity != rhs._velocity {return false}
    if lhs._orientation != rhs._orientation {return false}
    if lhs._acceleration != rhs._acceleration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.protoMessageName + ".Vehicle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "systems"),
    2: .same(proto: "endurance"),
    3: .same(proto: "airborne"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.systems)
      case 2: try decoder.decodeSingularMessageField(value: &self._endurance)
      case 3: try decoder.decodeSingularMessageField(value: &self._airborne)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.systems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.systems, fieldNumber: 1)
    }
    if let v = self._endurance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._airborne {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle, rhs: Telemetry_Report.Vehicle) -> Bool {
    if lhs.systems != rhs.systems {return false}
    if lhs._endurance != rhs._endurance {return false}
    if lhs._airborne != rhs._airborne {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.protoMessageName + ".System"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "electrical"),
    2: .same(proto: "communication"),
    3: .same(proto: "propulsion"),
    4: .same(proto: "safety"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Telemetry_Report.Vehicle.System.Electrical?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .electrical(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .electrical(v)}
      case 2:
        var v: Telemetry_Report.Vehicle.System.Communication?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .communication(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .communication(v)}
      case 3:
        var v: Telemetry_Report.Vehicle.System.Propulsion?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .propulsion(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .propulsion(v)}
      case 4:
        var v: Telemetry_Report.Vehicle.System.Safety?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .safety(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .safety(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.details {
    case .electrical(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .communication(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .propulsion(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case .safety(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System, rhs: Telemetry_Report.Vehicle.System) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Electrical: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.protoMessageName + ".Electrical"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "buses"),
    2: .same(proto: "batteries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.buses)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.batteries)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.buses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buses, fieldNumber: 1)
    }
    if !self.batteries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.batteries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Electrical, rhs: Telemetry_Report.Vehicle.System.Electrical) -> Bool {
    if lhs.buses != rhs.buses {return false}
    if lhs.batteries != rhs.batteries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Electrical.Bus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.Electrical.protoMessageName + ".Bus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "voltage"),
    3: .same(proto: "current"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.number)
      case 2: try decoder.decodeSingularMessageField(value: &self._voltage)
      case 3: try decoder.decodeSingularMessageField(value: &self._current)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 1)
    }
    if let v = self._voltage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._current {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Electrical.Bus, rhs: Telemetry_Report.Vehicle.System.Electrical.Bus) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs._voltage != rhs._voltage {return false}
    if lhs._current != rhs._current {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Electrical.Battery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.Electrical.protoMessageName + ".Battery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "temperature"),
    3: .same(proto: "voltage"),
    4: .same(proto: "current"),
    5: .same(proto: "capacity"),
    6: .same(proto: "charge"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.number)
      case 2: try decoder.decodeSingularMessageField(value: &self._temperature)
      case 3: try decoder.decodeSingularMessageField(value: &self._voltage)
      case 4: try decoder.decodeSingularMessageField(value: &self._current)
      case 5: try decoder.decodeSingularMessageField(value: &self._capacity)
      case 6: try decoder.decodeSingularMessageField(value: &self._charge)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 1)
    }
    if let v = self._temperature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._voltage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._current {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._capacity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._charge {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Electrical.Battery, rhs: Telemetry_Report.Vehicle.System.Electrical.Battery) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs._temperature != rhs._temperature {return false}
    if lhs._voltage != rhs._voltage {return false}
    if lhs._current != rhs._current {return false}
    if lhs._capacity != rhs._capacity {return false}
    if lhs._charge != rhs._charge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Propulsion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.protoMessageName + ".Propulsion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "motors"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.motors)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.motors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.motors, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Propulsion, rhs: Telemetry_Report.Vehicle.System.Propulsion) -> Bool {
    if lhs.motors != rhs.motors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Propulsion.Motor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.Propulsion.protoMessageName + ".Motor"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "voltage"),
    3: .same(proto: "current"),
    4: .same(proto: "temperature"),
    5: .same(proto: "rpm"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.number)
      case 2: try decoder.decodeSingularMessageField(value: &self._voltage)
      case 3: try decoder.decodeSingularMessageField(value: &self._current)
      case 4: try decoder.decodeSingularMessageField(value: &self._temperature)
      case 5: try decoder.decodeSingularMessageField(value: &self._rpm)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 1)
    }
    if let v = self._voltage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._current {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._temperature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._rpm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Propulsion.Motor, rhs: Telemetry_Report.Vehicle.System.Propulsion.Motor) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs._voltage != rhs._voltage {return false}
    if lhs._current != rhs._current {return false}
    if lhs._temperature != rhs._temperature {return false}
    if lhs._rpm != rhs._rpm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.protoMessageName + ".Communication"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "links"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.links)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.links.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.links, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Communication, rhs: Telemetry_Report.Vehicle.System.Communication) -> Bool {
    if lhs.links != rhs.links {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication.Band: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BAND_UNKNOWN"),
    1: .same(proto: "BAND_2DOT4GHZ"),
    2: .same(proto: "BAND_5DOT0GHZ"),
  ]
}

extension Telemetry_Report.Vehicle.System.Communication.Link: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.Communication.protoMessageName + ".Link"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gps"),
    2: .same(proto: "wifi"),
    3: .same(proto: "cellular"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: Telemetry_Report.Vehicle.System.Communication.Link.GPS?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .gps(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .gps(v)}
      case 2:
        var v: Telemetry_Report.Vehicle.System.Communication.Link.WiFi?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .wifi(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .wifi(v)}
      case 3:
        var v: Telemetry_Report.Vehicle.System.Communication.Link.Cellular?
        if let current = self.details {
          try decoder.handleConflictingOneOf()
          if case .cellular(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.details = .cellular(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.details {
    case .gps(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .wifi(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case .cellular(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link, rhs: Telemetry_Report.Vehicle.System.Communication.Link) -> Bool {
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication.Link.WiFi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.Communication.Link.protoMessageName + ".WiFi"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "ssid"),
    3: .same(proto: "channel"),
    4: .same(proto: "band"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.number)
      case 2: try decoder.decodeSingularStringField(value: &self.ssid)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.channel)
      case 4: try decoder.decodeSingularEnumField(value: &self.band)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 1)
    }
    if !self.ssid.isEmpty {
      try visitor.visitSingularStringField(value: self.ssid, fieldNumber: 2)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 3)
    }
    if self.band != .unknown {
      try visitor.visitSingularEnumField(value: self.band, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link.WiFi, rhs: Telemetry_Report.Vehicle.System.Communication.Link.WiFi) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs.ssid != rhs.ssid {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.band != rhs.band {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication.Link.GPS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.Communication.Link.protoMessageName + ".GPS"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "satellites"),
    3: .same(proto: "hdop"),
    4: .same(proto: "vdop"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.number)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.satellites)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.hdop)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.vdop)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 1)
    }
    if self.satellites != 0 {
      try visitor.visitSingularUInt32Field(value: self.satellites, fieldNumber: 2)
    }
    if self.hdop != 0 {
      try visitor.visitSingularUInt32Field(value: self.hdop, fieldNumber: 3)
    }
    if self.vdop != 0 {
      try visitor.visitSingularUInt32Field(value: self.vdop, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link.GPS, rhs: Telemetry_Report.Vehicle.System.Communication.Link.GPS) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs.satellites != rhs.satellites {return false}
    if lhs.hdop != rhs.hdop {return false}
    if lhs.vdop != rhs.vdop {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Communication.Link.Cellular: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.Communication.Link.protoMessageName + ".Cellular"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "signal"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.number)
      case 2: try decoder.decodeSingularMessageField(value: &self._signal)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.number != 0 {
      try visitor.visitSingularUInt32Field(value: self.number, fieldNumber: 1)
    }
    if let v = self._signal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Communication.Link.Cellular, rhs: Telemetry_Report.Vehicle.System.Communication.Link.Cellular) -> Bool {
    if lhs.number != rhs.number {return false}
    if lhs._signal != rhs._signal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.System.Safety: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.System.protoMessageName + ".Safety"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "loss_of_link"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._lossOfLink)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lossOfLink {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.System.Safety, rhs: Telemetry_Report.Vehicle.System.Safety) -> Bool {
    if lhs._lossOfLink != rhs._lossOfLink {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Vehicle.Endurance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.Vehicle.protoMessageName + ".Endurance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "duration"),
    2: .same(proto: "distance"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._duration)
      case 2: try decoder.decodeSingularMessageField(value: &self._distance)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._distance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Vehicle.Endurance, rhs: Telemetry_Report.Vehicle.Endurance) -> Bool {
    if lhs._duration != rhs._duration {return false}
    if lhs._distance != rhs._distance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry_Report.Atmosphere: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Telemetry_Report.protoMessageName + ".Atmosphere"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .same(proto: "pressure"),
    3: .same(proto: "temperature"),
    4: .same(proto: "wind"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._position)
      case 2: try decoder.decodeSingularMessageField(value: &self._pressure)
      case 3: try decoder.decodeSingularMessageField(value: &self._temperature)
      case 4: try decoder.decodeSingularMessageField(value: &self._wind)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pressure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._temperature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._wind {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry_Report.Atmosphere, rhs: Telemetry_Report.Atmosphere) -> Bool {
    if lhs._position != rhs._position {return false}
    if lhs._pressure != rhs._pressure {return false}
    if lhs._temperature != rhs._temperature {return false}
    if lhs._wind != rhs._wind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
